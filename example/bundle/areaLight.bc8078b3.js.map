{"mappings":"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","sources":["src/index.js","src/core/PathTracingRenderer.js","src/materials/BlendMaterial.js","src/core/DynamicPathTracingSceneGenerator.js","src/core/MaterialReducer.js","src/objects/PhysicalCamera.js","src/objects/EquirectCamera.js","src/objects/PhysicalSpotLight.js","src/objects/ShapedAreaLight.js","src/utils/BlurredEnvMapGenerator.js","src/utils/IESLoader.js","src/materials/DenoiseMaterial.js","src/materials/GraphMaterial.js","src/materials/PhysicalPathTracingMaterial.js","src/uniforms/MaterialsTexture.js","src/uniforms/RenderTarget2DArray.js","src/shader/shaderMaterialSampling.js","src/shader/shaderGGXFunctions.js","src/shader/shaderSheenFunctions.js","src/shader/shaderIridescenceFunctions.js","src/shader/shaderEnvMapSampling.js","src/shader/shaderLightSampling.js","src/uniforms/PhysicalCameraUniform.js","src/uniforms/EquirectHdrInfoUniform.js","src/uniforms/LightsInfoUniformStruct.js","src/uniforms/IESProfilesTexture.js"],"sourcesContent":["// core\nexport * from './core/PathTracingRenderer.js';\nexport * from './core/PathTracingSceneGenerator.js';\nexport * from './core/DynamicPathTracingSceneGenerator.js';\nexport * from './core/MaterialReducer.js';\n\n// objects\nexport * from './objects/PhysicalCamera.js';\nexport * from './objects/EquirectCamera.js';\nexport * from './objects/PhysicalSpotLight.js';\nexport * from './objects/ShapedAreaLight.js';\n\n// uniforms\nexport * from './uniforms/MaterialsTexture.js';\nexport * from './uniforms/RenderTarget2DArray.js';\nexport * from './uniforms/EquirectHdrInfoUniform.js';\nexport * from './uniforms/PhysicalCameraUniform.js';\nexport * from './uniforms/LightsInfoUniformStruct.js';\nexport * from './uniforms/IESProfilesTexture.js';\n\n// utils\nexport * from './utils/GeometryPreparationUtils.js';\nexport * from './utils/BlurredEnvMapGenerator.js';\nexport * from './utils/IESLoader.js';\n\n// materials\nexport * from './materials/DenoiseMaterial.js';\nexport * from './materials/GraphMaterial.js';\nexport * from './materials/MaterialBase.js';\nexport * from './materials/PhysicalPathTracingMaterial.js';\n\n// shaders\nexport * from './shader/shaderMaterialSampling.js';\nexport * from './shader/shaderUtils.js';\nexport * from './shader/shaderStructs.js';\n","import { RGBAFormat, FloatType, Color, Vector2, WebGLRenderTarget, NoBlending, NormalBlending } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { BlendMaterial } from '../materials/BlendMaterial.js';\n\nfunction* renderTask() {\n\n\tconst {\n\t\t_renderer,\n\t\t_fsQuad,\n\t\t_blendQuad,\n\t\t_primaryTarget,\n\t\t_blendTargets,\n\t\talpha,\n\t\tcamera,\n\t\tmaterial,\n\t} = this;\n\n\tconst blendMaterial = _blendQuad.material;\n\tlet [ blendTarget1, blendTarget2 ] = _blendTargets;\n\n\twhile ( true ) {\n\n\t\tif ( alpha ) {\n\n\t\t\tblendMaterial.opacity = 1 / ( this.samples + 1 );\n\t\t\tmaterial.blending = NoBlending;\n\t\t\tmaterial.opacity = 1;\n\n\t\t} else {\n\n\t\t\tmaterial.opacity = 1 / ( this.samples + 1 );\n\t\t\tmaterial.blending = NormalBlending;\n\n\t\t}\n\n\t\tconst w = _primaryTarget.width;\n\t\tconst h = _primaryTarget.height;\n\t\tmaterial.resolution.set( w, h );\n\t\tmaterial.seed ++;\n\n\t\tconst tilesX = this.tiles.x || 1;\n\t\tconst tilesY = this.tiles.y || 1;\n\t\tconst totalTiles = tilesX * tilesY;\n\t\tconst dprInv = ( 1 / _renderer.getPixelRatio() );\n\t\tfor ( let y = 0; y < tilesY; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < tilesX; x ++ ) {\n\n\t\t\t\tmaterial.cameraWorldMatrix.copy( camera.matrixWorld );\n\t\t\t\tmaterial.invProjectionMatrix.copy( camera.projectionMatrixInverse );\n\n\t\t\t\t// Perspective camera (default)\n\t\t\t\tlet cameraType = 0;\n\n\t\t\t\t// An orthographic projection matrix will always have the bottom right element == 1\n\t\t\t\t// And a perspective projection matrix will always have the bottom right element == 0\n\t\t\t\tif ( camera.projectionMatrix.elements[ 15 ] > 0 ) {\n\n\t\t\t\t\t// Orthographic\n\t\t\t\t\tcameraType = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( camera.isEquirectCamera ) {\n\n\t\t\t\t\t// Equirectangular\n\t\t\t\t\tcameraType = 2;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.setDefine( 'CAMERA_TYPE', cameraType );\n\n\t\t\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\t\t\tconst ogAutoClear = _renderer.autoClear;\n\n\t\t\t\tlet tx = x;\n\t\t\t\tlet ty = y;\n\t\t\t\tif ( ! this.stableTiles ) {\n\n\t\t\t\t\tconst tileIndex = ( this._currentTile ) % ( tilesX * tilesY );\n\t\t\t\t\ttx = tileIndex % tilesX;\n\t\t\t\t\tty = ~ ~ ( tileIndex / tilesX );\n\n\t\t\t\t\tthis._currentTile = tileIndex + 1;\n\n\t\t\t\t}\n\n\t\t\t\t// three.js renderer takes values relative to the current pixel ratio\n\t\t\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t\t\t_renderer.setScissorTest( true );\n\t\t\t\t_renderer.setScissor(\n\t\t\t\t\tdprInv * Math.ceil( tx * w / tilesX ),\n\t\t\t\t\tdprInv * Math.ceil( ( tilesY - ty - 1 ) * h / tilesY ),\n\t\t\t\t\tdprInv * Math.ceil( w / tilesX ),\n\t\t\t\t\tdprInv * Math.ceil( h / tilesY ) );\n\t\t\t\t_renderer.autoClear = false;\n\t\t\t\t_fsQuad.render( _renderer );\n\n\t\t\t\t_renderer.setScissorTest( false );\n\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\t\t\t\t_renderer.autoClear = ogAutoClear;\n\n\t\t\t\tif ( alpha ) {\n\n\t\t\t\t\tblendMaterial.target1 = blendTarget1.texture;\n\t\t\t\t\tblendMaterial.target2 = _primaryTarget.texture;\n\n\t\t\t\t\t_renderer.setRenderTarget( blendTarget2 );\n\t\t\t\t\t_blendQuad.render( _renderer );\n\t\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tthis.samples += ( 1 / totalTiles );\n\n\t\t\t\tyield;\n\n\t\t\t}\n\n\t\t}\n\n\t\t[ blendTarget1, blendTarget2 ] = [ blendTarget2, blendTarget1 ];\n\n\t\tthis.samples = Math.round( this.samples );\n\n\t}\n\n}\n\nconst ogClearColor = new Color();\nexport class PathTracingRenderer {\n\n\tget material() {\n\n\t\treturn this._fsQuad.material;\n\n\t}\n\n\tset material( v ) {\n\n\t\tthis._fsQuad.material = v;\n\n\t}\n\n\tget target() {\n\n\t\treturn this._alpha ? this._blendTargets[ 1 ] : this._primaryTarget;\n\n\t}\n\n\tset alpha( v ) {\n\n\t\tif ( ! v ) {\n\n\t\t\tthis._blendTargets[ 0 ].dispose();\n\t\t\tthis._blendTargets[ 1 ].dispose();\n\n\t\t}\n\n\t\tthis._alpha = v;\n\t\tthis.reset();\n\n\t}\n\n\tget alpha() {\n\n\t\treturn this._alpha;\n\n\t}\n\n\tconstructor( renderer ) {\n\n\t\tthis.camera = null;\n\t\tthis.tiles = new Vector2( 1, 1 );\n\n\t\tthis.samples = 0;\n\t\tthis.stableNoise = false;\n\t\tthis.stableTiles = true;\n\n\t\tthis._renderer = renderer;\n\t\tthis._alpha = false;\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\t\tthis._blendQuad = new FullScreenQuad( new BlendMaterial() );\n\t\tthis._task = null;\n\t\tthis._currentTile = 0;\n\n\t\tthis._primaryTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: FloatType,\n\t\t} );\n\t\tthis._blendTargets = [\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t];\n\n\t}\n\n\tsetSize( w, h ) {\n\n\t\tthis._primaryTarget.setSize( w, h );\n\t\tthis._blendTargets[ 0 ].setSize( w, h );\n\t\tthis._blendTargets[ 1 ].setSize( w, h );\n\t\tthis.reset();\n\n\t}\n\n\tdispose() {\n\n\t\tthis._primaryTarget.dispose();\n\t\tthis._blendTargets[ 0 ].dispose();\n\t\tthis._blendTargets[ 1 ].dispose();\n\n\t\tthis._fsQuad.dispose();\n\t\tthis._blendQuad.dispose();\n\t\tthis._task = null;\n\n\t}\n\n\treset() {\n\n\t\tconst { _renderer, _primaryTarget, _blendTargets } = this;\n\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\tconst ogClearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.getClearColor( ogClearColor );\n\n\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 0 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 1 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setClearColor( ogClearColor, ogClearAlpha );\n\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\tthis.samples = 0;\n\t\tthis._task = null;\n\n\t\tif ( this.stableNoise ) {\n\n\t\t\tthis.material.seed = 0;\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tif ( ! this._task ) {\n\n\t\t\tthis._task = renderTask.call( this );\n\n\t\t}\n\n\t\tthis._task.next();\n\n\t}\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\n\nexport class BlendMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\tuniforms: {\n\n\t\t\t\ttarget1: { value: null },\n\t\t\t\ttarget2: { value: null },\n\t\t\t\topacity: { value: 1.0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tuniform sampler2D target1;\n\t\t\t\tuniform sampler2D target2;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 color1 = texture2D( target1, vUv );\n\t\t\t\t\tvec4 color2 = texture2D( target2, vUv );\n\n\t\t\t\t\tfloat invOpacity = 1.0 - opacity;\n\t\t\t\t\tfloat totalAlpha = color1.a * invOpacity + color2.a * opacity;\n\n\t\t\t\t\tif ( color1.a != 0.0 || color2.a != 0.0 ) {\n\n\t\t\t\t\t\tgl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );\n\t\t\t\t\t\tgl_FragColor.a = totalAlpha;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { BufferGeometry } from 'three';\nimport { StaticGeometryGenerator, MeshBVH } from 'three-mesh-bvh';\nimport { setCommonAttributes, getGroupMaterialIndicesAttribute } from '../utils/GeometryPreparationUtils.js';\n\nexport class DynamicPathTracingSceneGenerator {\n\n\tget initialized() {\n\n\t\treturn Boolean( this.bvh );\n\n\t}\n\n\tconstructor( scene ) {\n\n\t\tthis.objects = Array.isArray( scene ) ? scene : [ scene ];\n\t\tthis.bvh = null;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.lights = [];\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( scene );\n\n\t}\n\n\treset() {\n\n\t\tthis.bvh = null;\n\t\tthis.geometry.dispose();\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.lights = [];\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( this.objects );\n\n\t}\n\n\tdispose() {}\n\n\tgenerate() {\n\n\t\tconst { objects, staticGeometryGenerator, geometry } = this;\n\t\tif ( this.bvh === null ) {\n\n\t\t\tconst attributes = [ 'position', 'normal', 'tangent', 'uv', 'color' ];\n\n\t\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tobjects[ i ].traverse( c => {\n\n\t\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\t\tconst normalMapRequired = ! ! c.material.normalMap;\n\t\t\t\t\t\tsetCommonAttributes( c.geometry, { attributes, normalMapRequired } );\n\n\t\t\t\t\t} else if ( c.isRectAreaLight || c.isSpotLight ) {\n\n\t\t\t\t\t\tthis.lights.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst textureSet = new Set();\n\t\t\tconst materials = staticGeometryGenerator.getMaterials();\n\t\t\tmaterials.forEach( material => {\n\n\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\t\t\ttextureSet.add( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tstaticGeometryGenerator.attributes = attributes;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\n\t\t\tconst materialIndexAttribute = getGroupMaterialIndicesAttribute( geometry, materials, materials );\n\t\t\tgeometry.setAttribute( 'materialIndex', materialIndexAttribute );\n\t\t\tgeometry.clearGroups();\n\n\t\t\tthis.bvh = new MeshBVH( geometry );\n\t\t\tthis.materials = materials;\n\t\t\tthis.textures = Array.from( textureSet );\n\n\t\t\treturn {\n\t\t\t\tlights: this.lights,\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tobjects,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst { bvh } = this;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\t\t\tbvh.refit();\n\t\t\treturn {\n\t\t\t\tlights: this.lights,\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tobjects,\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\n}\n","// https://github.com/gkjohnson/webxr-sandbox/blob/main/skinned-mesh-batching/src/MaterialReducer.js\n\nfunction isTypedArray( arr ) {\n\n\treturn arr.buffer instanceof ArrayBuffer && 'BYTES_PER_ELEMENT' in arr;\n\n}\n\nexport class MaterialReducer {\n\n\tconstructor() {\n\n\t\tconst ignoreKeys = new Set();\n\t\tignoreKeys.add( 'uuid' );\n\n\t\tthis.ignoreKeys = ignoreKeys;\n\t\tthis.shareTextures = true;\n\t\tthis.textures = [];\n\t\tthis.materials = [];\n\n\t}\n\n\tareEqual( objectA, objectB ) {\n\n\t\tconst keySet = new Set();\n\t\tconst traverseSet = new Set();\n\t\tconst ignoreKeys = this.ignoreKeys;\n\n\t\tconst traverse = ( a, b ) => {\n\n\t\t\tif ( a === b ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tif ( a && b && a instanceof Object && b instanceof Object ) {\n\n\t\t\t\tif ( traverseSet.has( a ) || traverseSet.has( b ) ) {\n\n\t\t\t\t\tthrow new Error( 'MaterialReducer: Material is recursive.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsElement = a instanceof Element;\n\t\t\t\tconst bIsElement = b instanceof Element;\n\t\t\t\tif ( aIsElement || bIsElement ) {\n\n\t\t\t\t\tif ( aIsElement !== bIsElement || ! ( a instanceof Image ) || ! ( b instanceof Image ) ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn a.src === b.src;\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsImageBitmap = a instanceof ImageBitmap;\n\t\t\t\tconst bIsImageBitmap = b instanceof ImageBitmap;\n\t\t\t\tif ( aIsImageBitmap || bIsImageBitmap ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( a.equals ) {\n\n\t\t\t\t\treturn a.equals( b );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsTypedArray = isTypedArray( a );\n\t\t\t\tconst bIsTypedArray = isTypedArray( b );\n\t\t\t\tif ( aIsTypedArray || bIsTypedArray ) {\n\n\t\t\t\t\tif ( aIsTypedArray !== bIsTypedArray || a.constructor !== b.constructor || a.length !== b.length ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.add( a );\n\t\t\t\ttraverseSet.add( b );\n\n\t\t\t\tkeySet.clear();\n\t\t\t\tfor ( const key in a ) {\n\n\t\t\t\t\tif ( ! a.hasOwnProperty( key ) || a[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const key in b ) {\n\n\t\t\t\t\tif ( ! b.hasOwnProperty( key ) || b[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tconst keys = Array.from( keySet.values() );\n\t\t\t\tlet result = true;\n\t\t\t\tfor ( const i in keys ) {\n\n\t\t\t\t\tconst key = keys[ i ];\n\t\t\t\t\tif ( ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = traverse( a[ key ], b[ key ] );\n\t\t\t\t\tif ( ! result ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.delete( a );\n\t\t\t\ttraverseSet.delete( b );\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t\treturn traverse( objectA, objectB );\n\n\t}\n\n\tprocess( object ) {\n\n\t\tconst { textures, materials } = this;\n\t\tlet replaced = 0;\n\n\t\tconst processMaterial = material => {\n\n\t\t\t// Check if another material matches this one\n\t\t\tlet foundMaterial = null;\n\t\t\tfor ( const i in materials ) {\n\n\t\t\t\tconst otherMaterial = materials[ i ];\n\t\t\t\tif ( this.areEqual( material, otherMaterial ) ) {\n\n\t\t\t\t\tfoundMaterial = otherMaterial;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( foundMaterial ) {\n\n\t\t\t\treplaced ++;\n\t\t\t\treturn foundMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( material );\n\n\t\t\t\tif ( this.shareTextures ) {\n\n\t\t\t\t\t// See if there's another texture that matches the ones on this material\n\t\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\t\tif ( ! material.hasOwnProperty( key ) ) continue;\n\n\t\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\t\tif ( value && value.isTexture && value.image instanceof Image ) {\n\n\t\t\t\t\t\t\tlet foundTexture = null;\n\t\t\t\t\t\t\tfor ( const i in textures ) {\n\n\t\t\t\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\t\t\t\tif ( this.areEqual( texture, value ) ) {\n\n\t\t\t\t\t\t\t\t\tfoundTexture = texture;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( foundTexture ) {\n\n\t\t\t\t\t\t\t\tmaterial[ key ] = foundTexture;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttextures.push( value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t};\n\n\t\tobject.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.material ) {\n\n\t\t\t\tconst material = c.material;\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tmaterial[ i ] = processMaterial( material[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tc.material = processMaterial( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn { replaced, retained: materials.length };\n\n\t}\n\n}\n","import { PerspectiveCamera } from 'three';\n\nexport class PhysicalCamera extends PerspectiveCamera {\n\n\tset bokehSize( size ) {\n\n\t\tthis.fStop = this.getFocalLength() / size;\n\n\t}\n\n\tget bokehSize() {\n\n\t\treturn this.getFocalLength() / this.fStop;\n\n\t}\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.fStop = 1.4;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 25;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n}\n","import { Camera } from 'three';\n\nexport class EquirectCamera extends Camera {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isEquirectCamera = true;\n\n\t}\n\n}\n","import { SpotLight } from 'three';\n\nexport class PhysicalSpotLight extends SpotLight {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.iesTexture = null;\n\t\tthis.radius = 0;\n\n\t}\n\n}\n","import { RectAreaLight } from 'three';\n\nexport class ShapedAreaLight extends RectAreaLight {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.isCircular = false;\n\n\t}\n\n}\n","import { WebGLRenderTarget, RGBAFormat, FloatType, PMREMGenerator, DataTexture, EquirectangularReflectionMapping } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { MaterialBase } from '../materials/MaterialBase.js';\nimport { shaderUtils } from '../shader/shaderUtils.js';\n\nclass PMREMCopyMaterial extends MaterialBase {\n\n\tconstructor() {\n\n\t\tsuper( {\n\n\t\t\tuniforms: {\n\n\t\t\t\tenvMap: { value: null },\n\t\t\t\tblur: { value: 0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\t\t${ shaderUtils }\n\n\t\t\t\tuniform sampler2D envMap;\n\t\t\t\tuniform float blur;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 rayDirection = equirectUvToDirection( vUv );\n\t\t\t\t\tgl_FragColor = textureCubeUV( envMap, rayDirection, blur );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t} );\n\n\t}\n\n}\n\nexport class BlurredEnvMapGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.pmremGenerator = new PMREMGenerator( renderer );\n\t\tthis.copyQuad = new FullScreenQuad( new PMREMCopyMaterial() );\n\t\tthis.renderTarget = new WebGLRenderTarget( 1, 1, { type: FloatType, format: RGBAFormat } );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.pmremGenerator.dispose();\n\t\tthis.copyQuad.dispose();\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\tgenerate( texture, blur ) {\n\n\t\tconst { pmremGenerator, renderTarget, copyQuad, renderer } = this;\n\n\t\t// get the pmrem target\n\t\tconst pmremTarget = pmremGenerator.fromEquirectangular( texture );\n\n\t\t// set up the material\n\t\tconst { width, height } = texture.image;\n\t\trenderTarget.setSize( width, height );\n\t\tcopyQuad.material.envMap = pmremTarget.texture;\n\t\tcopyQuad.material.blur = blur;\n\n\t\t// render\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = true;\n\t\tcopyQuad.render( renderer );\n\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.autoClear = prevClear;\n\n\t\t// read the data back\n\t\tconst buffer = new Float32Array( width * height * 4 );\n\t\trenderer.readRenderTargetPixels( renderTarget, 0, 0, width, height, buffer );\n\n\t\tconst result = new DataTexture( buffer, width, height, RGBAFormat, FloatType );\n\t\tresult.minFilter = texture.minFilter;\n\t\tresult.magFilter = texture.magFilter;\n\t\tresult.wrapS = texture.wrapS;\n\t\tresult.wrapT = texture.wrapT;\n\t\tresult.mapping = EquirectangularReflectionMapping;\n\t\tresult.needsUpdate = true;\n\n\t\treturn result;\n\n\t}\n\n}\n","import {\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tLinearFilter,\n\tRedFormat,\n\tMathUtils,\n\tLoader,\n} from 'three';\n\nfunction IESLamp( text ) {\n\n\tconst _self = this;\n\n\tconst textArray = text.split( '\\n' );\n\n\tlet lineNumber = 0;\n\tlet line;\n\n\t_self.verAngles = [ ];\n\t_self.horAngles = [ ];\n\n\t_self.candelaValues = [ ];\n\n\t_self.tiltData = { };\n\t_self.tiltData.angles = [ ];\n\t_self.tiltData.mulFactors = [ ];\n\n\tfunction textToArray( text ) {\n\n\t\ttext = text.replace( /^\\s+|\\s+$/g, '' ); // remove leading or trailing spaces\n\t\ttext = text.replace( /,/g, ' ' ); // replace commas with spaces\n\t\ttext = text.replace( /\\s\\s+/g, ' ' ); // replace white space/tabs etc by single whitespace\n\n\t\tconst array = text.split( ' ' );\n\n\t\treturn array;\n\n\t}\n\n\tfunction readArray( count, array ) {\n\n\t\twhile ( true ) {\n\n\t\t\tconst line = textArray[ lineNumber ++ ];\n\t\t\tconst lineData = textToArray( line );\n\n\t\t\tfor ( let i = 0; i < lineData.length; ++ i ) {\n\n\t\t\t\tarray.push( Number( lineData[ i ] ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length === count )\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction readTilt() {\n\n\t\tlet line = textArray[ lineNumber ++ ];\n\t\tlet lineData = textToArray( line );\n\n\t\t_self.tiltData.lampToLumGeometry = Number( lineData[ 0 ] );\n\n\t\tline = textArray[ lineNumber ++ ];\n\t\tlineData = textToArray( line );\n\n\t\t_self.tiltData.numAngles = Number( lineData[ 0 ] );\n\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.angles );\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.mulFactors );\n\n\t}\n\n\tfunction readLampValues() {\n\n\t\tconst values = [ ];\n\t\treadArray( 10, values );\n\n\t\t_self.count = Number( values[ 0 ] );\n\t\t_self.lumens = Number( values[ 1 ] );\n\t\t_self.multiplier = Number( values[ 2 ] );\n\t\t_self.numVerAngles = Number( values[ 3 ] );\n\t\t_self.numHorAngles = Number( values[ 4 ] );\n\t\t_self.gonioType = Number( values[ 5 ] );\n\t\t_self.units = Number( values[ 6 ] );\n\t\t_self.width = Number( values[ 7 ] );\n\t\t_self.length = Number( values[ 8 ] );\n\t\t_self.height = Number( values[ 9 ] );\n\n\t}\n\n\tfunction readLampFactors() {\n\n\t\tconst values = [ ];\n\t\treadArray( 3, values );\n\n\t\t_self.ballFactor = Number( values[ 0 ] );\n\t\t_self.blpFactor = Number( values[ 1 ] );\n\t\t_self.inputWatts = Number( values[ 2 ] );\n\n\t}\n\n\twhile ( true ) {\n\n\t\tline = textArray[ lineNumber ++ ];\n\n\t\tif ( line.includes( 'TILT' ) ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tif ( ! line.includes( 'NONE' ) ) {\n\n\t\tif ( line.includes( 'INCLUDE' ) ) {\n\n\t\t\treadTilt();\n\n\t\t} else {\n\n\t\t\t// TODO:: Read tilt data from a file\n\n\t\t}\n\n\t}\n\n\treadLampValues();\n\n\treadLampFactors();\n\n\t// Initialize candela value array\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t_self.candelaValues.push( [ ] );\n\n\t}\n\n\t// Parse Angles\n\treadArray( _self.numVerAngles, _self.verAngles );\n\treadArray( _self.numHorAngles, _self.horAngles );\n\n\t// Parse Candela values\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\treadArray( _self.numVerAngles, _self.candelaValues[ i ] );\n\n\t}\n\n\t// Calculate actual candela values, and normalize.\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t_self.candelaValues[ i ][ j ] *= _self.candelaValues[ i ][ j ] * _self.multiplier\n\t\t\t\t* _self.ballFactor * _self.blpFactor;\n\n\t\t}\n\n\t}\n\n\tlet maxVal = - 1;\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\tconst value = _self.candelaValues[ i ][ j ];\n\t\t\tmaxVal = maxVal < value ? value : maxVal;\n\n\t\t}\n\n\t}\n\n\tconst bNormalize = true;\n\tif ( bNormalize && maxVal > 0 ) {\n\n\t\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t\t_self.candelaValues[ i ][ j ] /= maxVal;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport class IESLoader extends Loader {\n\n\t_getIESValues( iesLamp ) {\n\n\t\tconst width = 360;\n\t\tconst height = 180;\n\t\tconst size = width * height;\n\n\t\tconst data = new Float32Array( size );\n\n\t\tfunction interpolateCandelaValues( phi, theta ) {\n\n\t\t\tlet phiIndex = 0, thetaIndex = 0;\n\t\t\tlet startTheta = 0, endTheta = 0, startPhi = 0, endPhi = 0;\n\n\t\t\tfor ( let i = 0; i < iesLamp.numHorAngles - 1; ++ i ) { // numHorAngles = horAngles.length-1 because of extra padding, so this wont cause an out of bounds error\n\n\t\t\t\tif ( theta < iesLamp.horAngles[ i + 1 ] || i == iesLamp.numHorAngles - 2 ) {\n\n\t\t\t\t\tthetaIndex = i;\n\t\t\t\t\tstartTheta = iesLamp.horAngles[ i ];\n\t\t\t\t\tendTheta = iesLamp.horAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < iesLamp.numVerAngles - 1; ++ i ) {\n\n\t\t\t\tif ( phi < iesLamp.verAngles[ i + 1 ] || i == iesLamp.numVerAngles - 2 ) {\n\n\t\t\t\t\tphiIndex = i;\n\t\t\t\t\tstartPhi = iesLamp.verAngles[ i ];\n\t\t\t\t\tendPhi = iesLamp.verAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deltaTheta = endTheta - startTheta;\n\t\t\tconst deltaPhi = endPhi - startPhi;\n\n\t\t\tif ( deltaPhi === 0 ) // Outside range\n\t\t\t\treturn 0;\n\n\t\t\tconst t1 = deltaTheta === 0 ? 0 : ( theta - startTheta ) / deltaTheta;\n\t\t\tconst t2 = ( phi - startPhi ) / deltaPhi;\n\n\t\t\tconst nextThetaIndex = deltaTheta === 0 ? thetaIndex : thetaIndex + 1;\n\n\t\t\tconst v1 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex ], t1 );\n\t\t\tconst v2 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex + 1 ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex + 1 ], t1 );\n\t\t\tconst v = MathUtils.lerp( v1, v2, t2 );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t\tconst startTheta = iesLamp.horAngles[ 0 ], endTheta = iesLamp.horAngles[ iesLamp.numHorAngles - 1 ];\n\t\tfor ( let i = 0; i < size; ++ i ) {\n\n\t\t\tlet theta = i % width;\n\t\t\tconst phi = Math.floor( i / width );\n\n\t\t\tif ( endTheta - startTheta !== 0 && ( theta < startTheta || theta >= endTheta ) ) { // Handle symmetry for hor angles\n\n\t\t\t\ttheta %= endTheta * 2;\n\t\t\t\tif ( theta > endTheta )\n\t\t\t\t\ttheta = endTheta * 2 - theta;\n\n\t\t\t}\n\n\t\t\tdata[ i ] = interpolateCandelaValues( phi, theta );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tconst texture = new DataTexture( null, 360, 180, RedFormat, FloatType );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\n\t\tloader.load( url, text => {\n\n\t\t\tconst iesLamp = new IESLamp( text );\n\n\t\t\ttexture.image.data = this._getIESValues( iesLamp );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst iesLamp = new IESLamp( text );\n\t\tconst texture = new DataTexture( null, 360, 180, RedFormat, FloatType );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.image.data = this._getIESValues( iesLamp );\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\n\nexport class DenoiseMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\ttransparent: false,\n\n\t\t\tdepthWrite: false,\n\n\t\t\tdepthTest: false,\n\n\t\t\tdefines: {\n\n\t\t\t\tUSE_SLIDER: 0,\n\n\t\t\t},\n\n\t\t\tuniforms: {\n\n\t\t\t\tsigma: { value: 5.0 },\n\t\t\t\tthreshold: { value: 0.03 },\n\t\t\t\tkSigma: { value: 1.0 },\n\n\t\t\t\tmap: { value: null },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\n\t\t\t\t//  All rights reserved.\n\t\t\t\t//\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\n\t\t\t\t//\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\n\t\t\t\t//\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\n\t\t\t\t//\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tuniform float sigma;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform float kSigma;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\n\n\t\t\t\t// Parameters:\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\n\t\t\t\t//\t\t kSigma * sigma  -->  radius of the circular kernel\n\t\t\t\t//\t float threshold   - edge sharpening threshold\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\n\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\n\t\t\t\t\tfloat radQ = radius * radius;\n\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\n\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\n\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\n\n\t\t\t\t\tfloat zBuff = 0.0;\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\n\n\t\t\t\t\tvec2 d;\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\n\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\n\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\n\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\n\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\n\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\n\n\t\t\t\t\t\t\tzBuff += deltaFactor;\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn aBuff / zBuff;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <encodings_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { NoBlending, Color, Vector2, Vector4 } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\n\nexport class GraphMaterial extends MaterialBase {\n\n\tget graphFunctionSnippet() {\n\n\t\treturn this._graphFunctionSnippet;\n\n\t}\n\n\tset graphFunctionSnippet( v ) {\n\n\t\tthis._graphFunctionSnippet = v;\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\ttransparent: false,\n\n\t\t\tdepthWrite: false,\n\n\t\t\tdepthTest: false,\n\n\t\t\tdefines: {\n\n\t\t\t\tUSE_SLIDER: 0,\n\n\t\t\t},\n\n\t\t\tuniforms: {\n\n\t\t\t\tdim: { value: true },\n\t\t\t\tthickness: { value: 1 },\n\t\t\t\tgraphCount: { value: 4 },\n\t\t\t\tgraphDisplay: { value: new Vector4( 1.0, 1.0, 1.0, 1.0 ) },\n\t\t\t\toverlay: { value: true },\n\t\t\t\txRange: { value: new Vector2( - 2.0, 2.0 ) },\n\t\t\t\tyRange: { value: new Vector2( - 2.0, 2.0 ) },\n\t\t\t\tcolors: { value: [\n\t\t\t\t\tnew Color( 0xe91e63 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0x4caf50 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0x03a9f4 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0xffc107 ).convertSRGBToLinear(),\n\t\t\t\t] },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform bool overlay;\n\t\t\t\tuniform bool dim;\n\t\t\t\tuniform bvec4 graphDisplay;\n\t\t\t\tuniform float graphCount;\n\t\t\t\tuniform float thickness;\n\t\t\t\tuniform vec2 xRange;\n\t\t\t\tuniform vec2 yRange;\n\t\t\t\tuniform vec3 colors[ 4 ];\n\n\t\t\t\t__FUNCTION_CONTENT__\n\n\t\t\t\tfloat map( float _min, float _max, float v ) {\n\n\t\t\t\t\tfloat len = _max - _min;\n\t\t\t\t\treturn _min + len * v;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getBackground( vec2 point, float steepness ) {\n\n\t\t\t\t\tvec2 pw = fwidth( point );\n\t\t\t\t\tvec2 halfWidth = pw * 0.5;\n\n\t\t\t\t\t// x, y axes\n\t\t\t\t\tvec2 distToZero = smoothstep(\n\t\t\t\t\t\t- halfWidth * 0.5,\n\t\t\t\t\t\thalfWidth * 0.5,\n\t\t\t\t\t\tabs( point.xy ) - pw\n\t\t\t\t\t);\n\n\t\t\t\t\t// 1 unit markers\n\t\t\t\t\tvec2 temp;\n\t\t\t\t\tvec2 modAxis = abs( modf( point + vec2( 0.5 ), temp ) ) - 0.5;\n\t\t\t\t\tvec2 distToAxis = smoothstep(\n\t\t\t\t\t\t- halfWidth,\n\t\t\t\t\t\thalfWidth,\n\t\t\t\t\t\tabs( modAxis.xy ) - pw * 0.5\n\t\t\t\t\t);\n\n\t\t\t\t\t// if we're at a chart boundary then remove the artifacts\n\t\t\t\t\tif ( abs( pw.y ) > steepness * 0.5 ) {\n\n\t\t\t\t\t\tdistToZero.y = 1.0;\n\t\t\t\t\t\tdistToAxis.y = 1.0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// mix colors into a background color\n\t\t\t\t\tfloat axisIntensity = 1.0 - min( distToZero.x, distToZero.y );\n\t\t\t\t\tfloat markerIntensity = 1.0 - min( distToAxis.x, distToAxis.y );\n\n\t\t\t\t\tvec3 markerColor = mix( vec3( 0.005 ), vec3( 0.05 ), markerIntensity );\n\t\t\t\t\tvec3 backgroundColor = mix( markerColor, vec3( 0.2 ), axisIntensity );\n\t\t\t\t\treturn backgroundColor;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t// from uniforms\n\t\t\t\t\tfloat sectionCount = overlay ? 1.0 : graphCount;\n\t\t\t\t\tfloat yWidth = abs( yRange.y - yRange.x );\n\n\t\t\t\t\t// separate into sections\n\t\t\t\t\tfloat _section;\n\t\t\t\t\tfloat sectionY = modf( sectionCount * vUv.y, _section );\n\t\t\t\t\tint section = int( sectionCount - _section - 1.0 );\n\n\t\t\t\t\t// get the current point\n\t\t\t\t\tvec2 point = vec2(\n\t\t\t\t\t\tmap( xRange.x, xRange.y, vUv.x ),\n\t\t\t\t\t\tmap( yRange.x, yRange.y, sectionY )\n\t\t\t\t\t);\n\n\t\t\t\t\t// get the results\n\t\t\t\t\tvec4 result = graphFunction( point.x );\n\t\t\t\t\tvec4 delta = result - vec4( point.y );\n\t\t\t\t\tvec4 halfDdf = fwidth( delta ) * 0.5;\n\t\t\t\t\tif ( fwidth( point.y ) > yWidth * 0.5 ) {\n\n\t\t\t\t\t\thalfDdf = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// graph display intensity\n\t\t\t\t\tvec4 graph = smoothstep( - halfDdf, halfDdf, abs( delta ) - thickness * halfDdf );\n\n\t\t\t\t\t// initialize the background\n\t\t\t\t\tgl_FragColor.rgb = getBackground( point, yWidth );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\tif ( dim && ( point.x < 0.0 || point.y < 0.0 ) ) {\n\n\t\t\t\t\t\tgraph = mix(\n\t\t\t\t\t\t\tvec4( 1.0 ),\n\t\t\t\t\t\t\tgraph,\n\t\t\t\t\t\t\t0.05\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// color the charts\n\t\t\t\t\tif ( sectionCount > 1.0 ) {\n\n\t\t\t\t\t\tif ( graphDisplay[ section ] ) {\n\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\tcolors[ section ],\n\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\tgraph[ section ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( int i = 0; i < int( graphCount ); i ++ ) {\n\n\t\t\t\t\t\t\tif ( graphDisplay[ i ] ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\t\tcolors[ i ],\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\t\tgraph[ i ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t#include <encodings_fragment>\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\n\t\tthis._graphFunctionSnippet = /* glsl */`\n\t\t\tvec4 graphFunctionSnippet( float x ) {\n\n\t\t\t\treturn vec4(\n\t\t\t\t\tsin( x * 3.1415926535 ),\n\t\t\t\t\tcos( x ),\n\t\t\t\t\t0.0,\n\t\t\t\t\t0.0\n\t\t\t\t);\n\n\t\t\t}\n\t\t`;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tonBeforeCompile( shader ) {\n\n\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t'__FUNCTION_CONTENT__',\n\t\t\tthis._graphFunctionSnippet,\n\t\t);\n\t\treturn shader;\n\n\t}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this._graphFunctionSnippet;\n\n\t}\n\n}\n","import { Matrix4, Matrix3, Color, Vector2 } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\nimport {\n\tMeshBVHUniformStruct, FloatVertexAttributeTexture, UIntVertexAttributeTexture,\n\tshaderStructs, shaderIntersectFunction,\n} from 'three-mesh-bvh';\nimport { shaderMaterialStructs, shaderLightStruct } from '../shader/shaderStructs.js';\nimport { MaterialsTexture } from '../uniforms/MaterialsTexture.js';\nimport { RenderTarget2DArray } from '../uniforms/RenderTarget2DArray.js';\nimport { shaderMaterialSampling } from '../shader/shaderMaterialSampling.js';\nimport { shaderEnvMapSampling } from '../shader/shaderEnvMapSampling.js';\nimport { shaderLightSampling } from '../shader/shaderLightSampling.js';\nimport { shaderUtils } from '../shader/shaderUtils.js';\nimport { PhysicalCameraUniform } from '../uniforms/PhysicalCameraUniform.js';\nimport { EquirectHdrInfoUniform } from '../uniforms/EquirectHdrInfoUniform.js';\nimport { LightsInfoUniformStruct } from '../uniforms/LightsInfoUniformStruct.js';\nimport { IESProfilesTexture } from '../uniforms/IESProfilesTexture.js';\n\nexport class PhysicalPathTracingMaterial extends MaterialBase {\n\n\tonBeforeRender() {\n\n\t\tthis.setDefine( 'FEATURE_DOF', this.physicalCamera.bokehSize === 0 ? 0 : 1 );\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\ttransparent: true,\n\t\t\tdepthWrite: false,\n\n\t\t\tdefines: {\n\t\t\t\tFEATURE_MIS: 1,\n\t\t\t\tFEATURE_DOF: 1,\n\t\t\t\tFEATURE_GRADIENT_BG: 0,\n\t\t\t\tTRANSPARENT_TRAVERSALS: 5,\n\t\t\t\t// 0 = Perspective\n\t\t\t\t// 1 = Orthographic\n\t\t\t\t// 2 = Equirectangular\n\t\t\t\tCAMERA_TYPE: 0,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tresolution: { value: new Vector2() },\n\n\t\t\t\tbounces: { value: 3 },\n\t\t\t\tphysicalCamera: { value: new PhysicalCameraUniform() },\n\n\t\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\t\tnormalAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\ttangentAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tuvAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tcolorAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tmaterialIndexAttribute: { value: new UIntVertexAttributeTexture() },\n\t\t\t\tmaterials: { value: new MaterialsTexture() },\n\t\t\t\ttextures: { value: new RenderTarget2DArray().texture },\n\t\t\t\tlights: { value: new LightsInfoUniformStruct() },\n\t\t\t\tiesProfiles: { value: new IESProfilesTexture().texture },\n\t\t\t\tcameraWorldMatrix: { value: new Matrix4() },\n\t\t\t\tinvProjectionMatrix: { value: new Matrix4() },\n\t\t\t\tbackgroundBlur: { value: 0.0 },\n\t\t\t\tenvironmentIntensity: { value: 1.0 },\n\t\t\t\tenvironmentRotation: { value: new Matrix3() },\n\t\t\t\tenvMapInfo: { value: new EquirectHdrInfoUniform() },\n\n\t\t\t\tseed: { value: 0 },\n\t\t\t\topacity: { value: 1 },\n\t\t\t\tfilterGlossyFactor: { value: 0.0 },\n\n\t\t\t\tbgGradientTop: { value: new Color( 0x111111 ) },\n\t\t\t\tbgGradientBottom: { value: new Color( 0x000000 ) },\n\t\t\t\tbackgroundAlpha: { value: 1.0 },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\tvUv = uv;\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\t#define RAY_OFFSET 1e-4\n\n\t\t\t\tprecision highp isampler2D;\n\t\t\t\tprecision highp usampler2D;\n\t\t\t\tprecision highp sampler2DArray;\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\t\t\t\t#include <common>\n\n\t\t\t\t${ shaderStructs }\n\t\t\t\t${ shaderIntersectFunction }\n\t\t\t\t${ shaderMaterialStructs }\n\t\t\t\t${ shaderLightStruct }\n\n\t\t\t\t${ shaderUtils }\n\t\t\t\t${ shaderMaterialSampling }\n\t\t\t\t${ shaderEnvMapSampling }\n\n\t\t\t\tuniform mat3 environmentRotation;\n\t\t\t\tuniform float backgroundBlur;\n\t\t\t\tuniform float backgroundAlpha;\n\n\t\t\t\t#if FEATURE_GRADIENT_BG\n\n\t\t\t\tuniform vec3 bgGradientTop;\n\t\t\t\tuniform vec3 bgGradientBottom;\n\n\t\t\t\t#endif\n\n\t\t\t\t#if FEATURE_DOF\n\n\t\t\t\tuniform PhysicalCamera physicalCamera;\n\n\t\t\t\t#endif\n\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform int bounces;\n\t\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\t\tuniform sampler2D normalAttribute;\n\t\t\t\tuniform sampler2D tangentAttribute;\n\t\t\t\tuniform sampler2D uvAttribute;\n\t\t\t\tuniform sampler2D colorAttribute;\n\t\t\t\tuniform usampler2D materialIndexAttribute;\n\t\t\t\tuniform BVH bvh;\n\t\t\t\tuniform float environmentIntensity;\n\t\t\t\tuniform float filterGlossyFactor;\n\t\t\t\tuniform int seed;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform sampler2D materials;\n\t\t\t\tuniform LightsInfo lights;\n\t\t\t\tuniform sampler2DArray iesProfiles;\n\n\t\t\t\t${ shaderLightSampling }\n\n\t\t\t\tuniform EquirectHdrInfo envMapInfo;\n\n\t\t\t\tuniform sampler2DArray textures;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat applyFilteredGlossy( float roughness, float accumulatedRoughness ) {\n\n\t\t\t\t\treturn clamp(\n\t\t\t\t\t\tmax(\n\t\t\t\t\t\t\troughness,\n\t\t\t\t\t\t\taccumulatedRoughness * filterGlossyFactor * 5.0 ),\n\t\t\t\t\t\t0.0,\n\t\t\t\t\t\t1.0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tvec3 sampleBackground( vec3 direction ) {\n\n\t\t\t\t\t#if FEATURE_GRADIENT_BG\n\n\t\t\t\t\tdirection = normalize( direction + randDirection() * 0.05 );\n\n\t\t\t\t\tfloat value = ( direction.y + 1.0 ) / 2.0;\n\t\t\t\t\tvalue = pow( value, 2.0 );\n\n\t\t\t\t\treturn mix( bgGradientBottom, bgGradientTop, value );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\tvec3 sampleDir = normalize( direction + getHemisphereSample( direction, rand2() ) * 0.5 * backgroundBlur );\n\t\t\t\t\treturn environmentIntensity * sampleEquirectEnvMapColor( sampleDir, envMapInfo.map );\n\n\t\t\t\t\t#endif\n\n\t\t\t\t}\n\n\t\t\t\t// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces\n\t\t\t\tbool attenuateHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection, int traversals, bool isShadowRay, out vec3 color ) {\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\tcolor = vec3( 1.0 );\n\n\t\t\t\t\tfor ( int i = 0; i < traversals; i ++ ) {\n\n\t\t\t\t\t\tif ( bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\t\t// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values\n\t\t\t\t\t\t\t// Should be able to work using the material BSDF functions which will take into account specularity, etc.\n\t\t\t\t\t\t\t// TODO: should we account for emissive surfaces here?\n\n\t\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( uvAttribute, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\t\tvec4 vertexColor = textureSampleBarycoord( colorAttribute, barycoord, faceIndices.xyz );\n\t\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\t\t// adjust the ray to the new surface\n\t\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Opacity Test\n\n\t\t\t\t\t\t\t// albedo\n\t\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t\t\talbedo *= vertexColor;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transmission\n\t\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// metalness\n\t\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\t\tfloat transmissionFactor = ( 1.0 - metalness ) * transmission;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttransmissionFactor < rand() && ! (\n\t\t\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\t\t\tmaterial.side != 0.0 && side == material.side\n\n\t\t\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( side == 1.0 && isBelowSurface ) {\n\n\t\t\t\t\t\t\t\t// only attenuate by surface color on the way in\n\t\t\t\t\t\t\t\tcolor *= mix( vec3( 1.0 ), albedo.rgb, transmissionFactor );\n\n\t\t\t\t\t\t\t} else if ( side == - 1.0 ) {\n\n\t\t\t\t\t\t\t\t// attenuate by medium once we hit the opposite side of the model\n\t\t\t\t\t\t\t\tcolor *= transmissionAttenuation( dist, material.attenuationColor, material.attenuationDistance );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\t// returns whether the ray hit anything before a certain distance, not just the first surface. Could be optimized to not check the full hierarchy.\n\t\t\t\tbool anyCloserHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection, float maxDist ) {\n\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\t\t\t\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\t\t\t\t\treturn hit && dist < maxDist;\n\n\t\t\t\t}\n\n\t\t\t\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t\t\t\t// erichlof/THREE.js-PathTracing-Renderer/\n\t\t\t\tfloat tentFilter( float x ) {\n\n\t\t\t\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t\t\t\t}\n\n\t\t\t\tvec3 ndcToRayOrigin( vec2 coord ) {\n\n\t\t\t\t\tvec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );\n\t\t\t\t\treturn rayOrigin4.xyz / rayOrigin4.w;\n\t\t\t\t}\n\n\t\t\t\tvoid getCameraRay( out vec3 rayDirection, out vec3 rayOrigin ) {\n\n\t\t\t\t\tvec2 ssd = vec2( 1.0 ) / resolution;\n\n\t\t\t\t\t// Jitter the camera ray by finding a uv coordinate at a random sample\n\t\t\t\t\t// around this pixel's UV coordinate\n\t\t\t\t\tvec2 jitteredUv = vUv + vec2( tentFilter( rand() ) * ssd.x, tentFilter( rand() ) * ssd.y );\n\n\t\t\t\t\t#if CAMERA_TYPE == 2\n\n\t\t\t\t\t\t// Equirectangular projection\n\n\t\t\t\t\t\tvec4 rayDirection4 = vec4( equirectUvToDirection( jitteredUv ), 0.0 );\n\t\t\t\t\t\tvec4 rayOrigin4 = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\t\t\trayDirection4 = cameraWorldMatrix * rayDirection4;\n\t\t\t\t\t\trayOrigin4 = cameraWorldMatrix * rayOrigin4;\n\n\t\t\t\t\t\trayDirection = normalize( rayDirection4.xyz );\n\t\t\t\t\t\trayOrigin = rayOrigin4.xyz / rayOrigin4.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t// get [- 1, 1] normalized device coordinates\n\t\t\t\t\t\tvec2 ndc = 2.0 * jitteredUv - vec2( 1.0 );\n\n\t\t\t\t\t\trayOrigin = ndcToRayOrigin( ndc );\n\n\t\t\t\t\t\t#if CAMERA_TYPE == 1\n\n\t\t\t\t\t\t\t// Orthographic projection\n\n\t\t\t\t\t\t\trayDirection = ( cameraWorldMatrix * vec4( 0.0, 0.0, - 1.0, 0.0 ) ).xyz;\n\t\t\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t// Perspective projection\n\n\t\t\t\t\t\t\trayDirection = normalize( mat3(cameraWorldMatrix) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if FEATURE_DOF\n\t\t\t\t\t{\n\n\t\t\t\t\t\t// depth of field\n\t\t\t\t\t\tvec3 focalPoint = rayOrigin + normalize( rayDirection ) * physicalCamera.focusDistance;\n\n\t\t\t\t\t\t// get the aperture sample\n\t\t\t\t\t\tvec2 apertureSample = sampleAperture( physicalCamera.apertureBlades ) * physicalCamera.bokehSize * 0.5 * 1e-3;\n\n\t\t\t\t\t\t// rotate the aperture shape\n\t\t\t\t\t\tfloat ac = cos( physicalCamera.apertureRotation );\n\t\t\t\t\t\tfloat as = sin( physicalCamera.apertureRotation );\n\t\t\t\t\t\tapertureSample = vec2(\n\t\t\t\t\t\t\tapertureSample.x * ac - apertureSample.y * as,\n\t\t\t\t\t\t\tapertureSample.x * as + apertureSample.y * ac\n\t\t\t\t\t\t);\n\t\t\t\t\t\tapertureSample.x *= saturate( physicalCamera.anamorphicRatio );\n\t\t\t\t\t\tapertureSample.y *= saturate( 1.0 / physicalCamera.anamorphicRatio );\n\n\t\t\t\t\t\t// create the new ray\n\t\t\t\t\t\trayOrigin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;\n\t\t\t\t\t\trayDirection = focalPoint - rayOrigin;\n\n\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\n\n\t\t\t\t\tvec3 rayDirection;\n\t\t\t\t\tvec3 rayOrigin;\n\n\t\t\t\t\tgetCameraRay( rayDirection, rayOrigin );\n\n\t\t\t\t\t// inverse environment rotation\n\t\t\t\t\tmat3 invEnvironmentRotation = inverse( environmentRotation );\n\n\t\t\t\t\t// final color\n\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\t// path tracing state\n\t\t\t\t\tfloat accumulatedRoughness = 0.0;\n\t\t\t\t\tfloat accumulatedClearcoatRoughness = 0.0;\n\t\t\t\t\tbool transmissiveRay = true;\n\t\t\t\t\tint transparentTraversals = TRANSPARENT_TRAVERSALS;\n\t\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\t\tSampleRec sampleRec;\n\t\t\t\t\tint i;\n\t\t\t\t\tbool isShadowRay = false;\n\n\t\t\t\t\tfor ( i = 0; i < bounces; i ++ ) {\n\n\t\t\t\t\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\n\t\t\t\t\t\tLightSampleRec lightHit = lightsClosestHit( lights.tex, lights.count, rayOrigin, rayDirection );\n\n\t\t\t\t\t\tif ( lightHit.hit && ( lightHit.dist < dist || !hit ) ) {\n\n\t\t\t\t\t\t\tif ( i == 0 || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// NOTE: we skip MIS for spotlights since we haven't fixed the forward\n\t\t\t\t\t\t\t\t// path tracing code path, yet\n\t\t\t\t\t\t\t\tif ( lightHit.type == SPOT_LIGHT_TYPE ) {\n\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// weight the contribution\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, lightHit.pdf / float( lights.count + 1u ) );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! hit ) {\n\n\t\t\t\t\t\t\tif ( i == 0 || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += sampleBackground( environmentRotation * rayDirection ) * throughputColor;\n\t\t\t\t\t\t\t\tgl_FragColor.a = backgroundAlpha;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// get the PDF of the hit envmap point\n\t\t\t\t\t\t\t\tvec3 envColor;\n\t\t\t\t\t\t\t\tfloat envPdf = envMapSample( environmentRotation * rayDirection, envMapInfo, envColor );\n\t\t\t\t\t\t\t\tenvPdf /= float( lights.count + 1u );\n\n\t\t\t\t\t\t\t\t// and weight the contribution\n\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, envPdf );\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += environmentIntensity * envColor * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb +=\n\t\t\t\t\t\t\t\t\tenvironmentIntensity *\n\t\t\t\t\t\t\t\t\tsampleEquirectEnvMapColor( environmentRotation * rayDirection, envMapInfo.map ) *\n\t\t\t\t\t\t\t\t\tthroughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\tif ( material.matte && i == 0 ) {\n\n\t\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we've determined that this is a shadow ray and we've hit an item with no shadow casting\n\t\t\t\t\t\t// then skip it\n\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// uv coord for textures\n\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( uvAttribute, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\tvec4 vertexColor = textureSampleBarycoord( colorAttribute, barycoord, faceIndices.xyz );\n\n\t\t\t\t\t\t// albedo\n\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t\talbedo *= vertexColor;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side\n\t\t\t\t\t\t// and it's single sided.\n\t\t\t\t\t\t// - alpha test is disabled when it === 0\n\t\t\t\t\t\t// - the material sidedness test is complicated because we want light to pass through the back side but still\n\t\t\t\t\t\t// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray\n\t\t\t\t\t\t// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.\n\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\tmaterial.side != 0.0 && side != material.side\n\n\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\t// only allow a limited number of transparency discards otherwise we could\n\t\t\t\t\t\t\t// crash the context with too long a loop.\n\t\t\t\t\t\t\ti -= sign( transparentTraversals );\n\t\t\t\t\t\t\ttransparentTraversals -= sign( transparentTraversals );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\t\tvec3 normal = normalize( textureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz );\n\n\t\t\t\t\t\t// roughness\n\t\t\t\t\t\tfloat roughness = material.roughness;\n\t\t\t\t\t\tif ( material.roughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\troughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// metalness\n\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// emission\n\t\t\t\t\t\tvec3 emission = material.emissiveIntensity * material.emissive;\n\t\t\t\t\t\tif ( material.emissiveMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\temission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// transmission\n\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// normal\n\t\t\t\t\t\tvec3 baseNormal = normal;\n\t\t\t\t\t\tif ( material.normalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\ttangentAttribute,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.normalScale;\n\t\t\t\t\t\t\t\tnormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnormal *= side;\n\n\t\t\t\t\t\t// clearcoat\n\t\t\t\t\t\tfloat clearcoat = material.clearcoat;\n\t\t\t\t\t\tif ( material.clearcoatMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tclearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// clearcoatRoughness\n\t\t\t\t\t\tfloat clearcoatRoughness = material.clearcoatRoughness;\n\t\t\t\t\t\tif ( material.clearcoatRoughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatRoughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tclearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatRoughnessMap ) ).g;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// clearcoatNormal\n\t\t\t\t\t\tvec3 clearcoatNormal = baseNormal;\n\t\t\t\t\t\tif ( material.clearcoatNormalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\ttangentAttribute,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( clearcoatNormal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatNormalMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.clearcoatNormalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.clearcoatNormalScale;\n\t\t\t\t\t\t\t\tclearcoatNormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearcoatNormal *= side;\n\n\t\t\t\t\t\t// sheenColor\n\t\t\t\t\t\tvec3 sheenColor = material.sheenColor;\n\t\t\t\t\t\tif ( material.sheenColorMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.sheenColorMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tsheenColor *= texture2D( textures, vec3( uvPrime.xy, material.sheenColorMap ) ).rgb;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sheenRoughness\n\t\t\t\t\t\tfloat sheenRoughness = material.sheenRoughness;\n\t\t\t\t\t\tif ( material.sheenRoughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.sheenRoughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tsheenRoughness *= texture2D( textures, vec3( uvPrime.xy, material.sheenRoughnessMap ) ).a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// iridescence\n\t\t\t\t\t\tfloat iridescence = material.iridescence;\n\t\t\t\t\t\tif ( material.iridescenceMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.iridescenceMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tiridescence *= texture2D( textures, vec3( uvPrime.xy, material.iridescenceMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// iridescence thickness\n\t\t\t\t\t\tfloat iridescenceThickness = material.iridescenceThicknessMaximum;\n\t\t\t\t\t\tif ( material.iridescenceThicknessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.iridescenceThicknessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tfloat iridescenceThicknessSampled = texture2D( textures, vec3( uvPrime.xy, material.iridescenceThicknessMap ) ).g;\n\t\t\t\t\t\t\tiridescenceThickness = mix( material.iridescenceThicknessMinimum, material.iridescenceThicknessMaximum, iridescenceThicknessSampled );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tiridescence = iridescenceThickness == 0.0 ? 0.0 : iridescence;\n\n\t\t\t\t\t\t// specular color\n\t\t\t\t\t\tvec3 specularColor = material.specularColor;\n\t\t\t\t\t\tif ( material.specularColorMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.specularColorMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tspecularColor *= texture2D( textures, vec3( uvPrime.xy, material.specularColorMap ) ).rgb;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// specular intensity\n\t\t\t\t\t\tfloat specularIntensity = material.specularIntensity;\n\t\t\t\t\t\tif ( material.specularIntensityMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.specularIntensityMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tspecularIntensity *= texture2D( textures, vec3( uvPrime.xy, material.specularIntensityMap ) ).a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tSurfaceRec surfaceRec;\n\t\t\t\t\t\tsurfaceRec.normal = normal;\n\t\t\t\t\t\tsurfaceRec.faceNormal = faceNormal;\n\t\t\t\t\t\tsurfaceRec.transmission = transmission;\n\t\t\t\t\t\tsurfaceRec.ior = material.ior;\n\t\t\t\t\t\tsurfaceRec.emission = emission;\n\t\t\t\t\t\tsurfaceRec.metalness = metalness;\n\t\t\t\t\t\tsurfaceRec.color = albedo.rgb;\n\t\t\t\t\t\tsurfaceRec.clearcoat = clearcoat;\n\t\t\t\t\t\tsurfaceRec.sheenColor = sheenColor;\n\t\t\t\t\t\tsurfaceRec.iridescence = iridescence;\n\t\t\t\t\t\tsurfaceRec.iridescenceIor = material.iridescenceIor;\n\t\t\t\t\t\tsurfaceRec.iridescenceThickness = iridescenceThickness;\n\t\t\t\t\t\tsurfaceRec.specularColor = specularColor;\n\t\t\t\t\t\tsurfaceRec.specularIntensity = specularIntensity;\n\t\t\t\t\t\tsurfaceRec.attenuationColor = material.attenuationColor;\n\t\t\t\t\t\tsurfaceRec.attenuationDistance = material.attenuationDistance;\n\n\t\t\t\t\t\t// apply perceptual roughness factor from gltf\n\t\t\t\t\t\t// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#microfacet-surfaces\n\t\t\t\t\t\tsurfaceRec.roughness = roughness * roughness;\n\t\t\t\t\t\tsurfaceRec.clearcoatRoughness = clearcoatRoughness * clearcoatRoughness;\n\t\t\t\t\t\tsurfaceRec.sheenRoughness = sheenRoughness * sheenRoughness;\n\n\t\t\t\t\t\t// frontFace is used to determine transmissive properties and PDF. If no transmission is used\n\t\t\t\t\t\t// then we can just always assume this is a front face.\n\t\t\t\t\t\tsurfaceRec.frontFace = side == 1.0 || transmission == 0.0;\n\t\t\t\t\t\tsurfaceRec.iorRatio = material.thinFilm || surfaceRec.frontFace ? 1.0 / material.ior : material.ior;\n\t\t\t\t\t\tsurfaceRec.thinFilm = material.thinFilm;\n\n\t\t\t\t\t\t// Compute the filtered roughness value to use during specular reflection computations.\n\t\t\t\t\t\t// The accumulated roughness value is scaled by a user setting and a \"magic value\" of 5.0.\n\t\t\t\t\t\t// If we're exiting something transmissive then scale the factor down significantly so we can retain\n\t\t\t\t\t\t// sharp internal reflections\n\t\t\t\t\t\tsurfaceRec.filteredRoughness = applyFilteredGlossy( surfaceRec.roughness, accumulatedRoughness );\n\t\t\t\t\t\tsurfaceRec.filteredClearcoatRoughness = applyFilteredGlossy( surfaceRec.clearcoatRoughness, accumulatedClearcoatRoughness );\n\n\t\t\t\t\t\tmat3 normalBasis = getBasisFromNormal( surfaceRec.normal );\n\t\t\t\t\t\tmat3 invBasis = inverse( normalBasis );\n\n\t\t\t\t\t\tmat3 clearcoatNormalBasis = getBasisFromNormal( clearcoatNormal );\n\t\t\t\t\t\tmat3 clearcoatInvBasis = inverse( clearcoatNormalBasis );\n\n\t\t\t\t\t\tvec3 outgoing = - normalize( invBasis * rayDirection );\n\t\t\t\t\t\tvec3 clearcoatOutgoing = - normalize( clearcoatInvBasis * rayDirection );\n\t\t\t\t\t\tsampleRec = bsdfSample( outgoing, clearcoatOutgoing, normalBasis, invBasis, clearcoatNormalBasis, clearcoatInvBasis, surfaceRec );\n\n\t\t\t\t\t\tisShadowRay = sampleRec.specularPdf < rand();\n\n\t\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t\t// error as values increase.\n\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\trayDirection = normalize( normalBasis * sampleRec.direction );\n\n\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t// direct env map sampling\n\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t// uniformly pick a light or environment map\n\t\t\t\t\t\tif( rand() > 1.0 / float( lights.count + 1u ) ) {\n\n\t\t\t\t\t\t\t// sample a light or environment\n\t\t\t\t\t\t\tLightSampleRec lightSampleRec = randomLightSample( lights.tex, iesProfiles, lights.count, rayOrigin );\n\n\t\t\t\t\t\t\tbool isSampleBelowSurface = dot( faceNormal, lightSampleRec.direction ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tlightSampleRec.pdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the light area\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlightSampleRec.pdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( lightSampleRec.direction, normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! anyCloserHit( bvh, rayOrigin, lightSampleRec.direction, lightSampleRec.dist )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat lightMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * lightSampleRec.direction ), normalize( clearcoatInvBasis * lightSampleRec.direction ), surfaceRec, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( lightMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tfloat lightPdf = lightSampleRec.pdf / float( lights.count + 1u );\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( lightPdf, lightMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor * sampleColor * misWeight / lightPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// find a sample in the environment map to include in the contribution\n\t\t\t\t\t\t\tvec3 envColor, envDirection;\n\t\t\t\t\t\t\tfloat envPdf = randomEnvMapSample( envMapInfo, envColor, envDirection );\n\t\t\t\t\t\t\tenvDirection = invEnvironmentRotation * envDirection;\n\n\t\t\t\t\t\t\t// this env sampling is not set up for transmissive sampling and yields overly bright\n\t\t\t\t\t\t\t// results so we ignore the sample in this case.\n\t\t\t\t\t\t\t// TODO: this should be improved but how? The env samples could traverse a few layers?\n\t\t\t\t\t\t\tbool isSampleBelowSurface = dot( faceNormal, envDirection ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tenvPdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the surface\n\t\t\t\t\t\t\tvec3 attenuatedColor;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tenvPdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( envDirection, normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! attenuateHit( bvh, rayOrigin, envDirection, bounces - i, isShadowRay, attenuatedColor )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat envMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * envDirection ), normalize( clearcoatInvBasis * envDirection ), surfaceRec, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( envMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tenvPdf /= float( lights.count + 1u );\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( envPdf, envMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += attenuatedColor * environmentIntensity * envColor * throughputColor * sampleColor * misWeight / envPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution\n\t\t\t\t\t\t// to a single pixel resulting in fireflies\n\t\t\t\t\t\tif ( ! isBelowSurface ) {\n\n\t\t\t\t\t\t\t// determine if this is a rough normal or not by checking how far off straight up it is\n\t\t\t\t\t\t\tvec3 halfVector = normalize( outgoing + sampleRec.direction );\n\t\t\t\t\t\t\taccumulatedRoughness += sin( acosApprox( halfVector.z ) );\n\n\t\t\t\t\t\t\tvec3 clearcoatHalfVector = normalize( clearcoatOutgoing + sampleRec.clearcoatDirection );\n\t\t\t\t\t\t\taccumulatedClearcoatRoughness += sin( acosApprox( clearcoatHalfVector.z ) );\n\n\t\t\t\t\t\t\ttransmissiveRay = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// accumulate color\n\t\t\t\t\t\tgl_FragColor.rgb += ( emission * throughputColor );\n\n\t\t\t\t\t\t// skip the sample if our PDF or ray is impossible\n\t\t\t\t\t\tif ( sampleRec.pdf <= 0.0 || ! isDirectionValid( rayDirection, normal, faceNormal) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthroughputColor *= sampleRec.color / sampleRec.pdf;\n\n\t\t\t\t\t\t// attenuate the throughput color by the medium color\n\t\t\t\t\t\tif ( side == - 1.0 ) {\n\n\t\t\t\t\t\t\tthroughputColor *= transmissionAttenuation( dist, surfaceRec.attenuationColor, surfaceRec.attenuationDistance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// discard the sample if there are any NaNs\n\t\t\t\t\t\tif ( any( isnan( throughputColor ) ) || any( isinf( throughputColor ) ) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, FrontSide, BackSide, DoubleSide } from 'three';\n\nconst MATERIAL_PIXELS = 45;\nconst MATERIAL_STRIDE = MATERIAL_PIXELS * 4;\n\nconst SIDE_OFFSET = 13 * 4 + 3; // s12.a\nconst MATTE_OFFSET = 14 * 4 + 0; // s14.r\nconst SHADOW_OFFSET = 14 * 4 + 1; // s14.g\n\nexport class MaterialsTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper( new Float32Array( 4 ), 1, 1 );\n\n\t\tthis.format = RGBAFormat;\n\t\tthis.type = FloatType;\n\t\tthis.wrapS = ClampToEdgeWrapping;\n\t\tthis.wrapT = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.threeCompatibilityTransforms = false;\n\n\t}\n\n\tsetCastShadow( materialIndex, cast ) {\n\n\t\t// invert the shadow value so we default to \"true\" when initializing a material\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SHADOW_OFFSET;\n\t\tarray[ index ] = ! cast ? 1 : 0;\n\n\t}\n\n\tgetCastShadow( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SHADOW_OFFSET;\n\t\treturn ! Boolean( array[ index ] );\n\n\t}\n\n\tsetSide( materialIndex, side ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SIDE_OFFSET;\n\t\tswitch ( side ) {\n\n\t\tcase FrontSide:\n\t\t\tarray[ index ] = 1;\n\t\t\tbreak;\n\t\tcase BackSide:\n\t\t\tarray[ index ] = - 1;\n\t\t\tbreak;\n\t\tcase DoubleSide:\n\t\t\tarray[ index ] = 0;\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tgetSide( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SIDE_OFFSET;\n\t\tswitch ( array[ index ] ) {\n\n\t\tcase 0:\n\t\t\treturn DoubleSide;\n\t\tcase 1:\n\t\t\treturn FrontSide;\n\t\tcase - 1:\n\t\t\treturn BackSide;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\tsetMatte( materialIndex, matte ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + MATTE_OFFSET;\n\t\tarray[ index ] = matte ? 1 : 0;\n\n\t}\n\n\tgetMatte( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + MATTE_OFFSET;\n\t\treturn Boolean( array[ index ] );\n\n\t}\n\n\tupdateFrom( materials, textures ) {\n\n\t\tfunction getTexture( material, key, def = - 1 ) {\n\n\t\t\treturn key in material ? textures.indexOf( material[ key ] ) : def;\n\n\t\t}\n\n\t\tfunction getField( material, key, def ) {\n\n\t\t\treturn key in material ? material[ key ] : def;\n\n\t\t}\n\n\t\tfunction getUVTransformTexture( material ) {\n\n\t\t\t// https://github.com/mrdoob/three.js/blob/f3a832e637c98a404c64dae8174625958455e038/src/renderers/webgl/WebGLMaterials.js#L204-L306\n\t\t\t// https://threejs.org/docs/#api/en/textures/Texture.offset\n\t\t\t// fallback order of textures to use as a common uv transform\n\t\t\treturn material.map ||\n\t\t\t\tmaterial.specularMap ||\n\t\t\t\tmaterial.displacementMap ||\n\t\t\t\tmaterial.normalMap ||\n\t\t\t\tmaterial.bumpMap ||\n\t\t\t\tmaterial.roughnessMap ||\n\t\t\t\tmaterial.metalnessMap ||\n\t\t\t\tmaterial.alphaMap ||\n\t\t\t\tmaterial.emissiveMap ||\n\t\t\t\tmaterial.clearcoatMap ||\n\t\t\t\tmaterial.clearcoatNormalMap ||\n\t\t\t\tmaterial.clearcoatRoughnessMap ||\n\t\t\t\tmaterial.iridescenceMap ||\n\t\t\t\tmaterial.iridescenceThicknessMap ||\n\t\t\t\tmaterial.specularIntensityMap ||\n\t\t\t\tmaterial.specularColorMap ||\n\t\t\t\tmaterial.transmissionMap ||\n\t\t\t\tmaterial.thicknessMap ||\n\t\t\t\tmaterial.sheenColorMap ||\n\t\t\t\tmaterial.sheenRoughnessMap ||\n\t\t\t\tnull;\n\n\t\t}\n\n\t\tfunction writeTextureMatrixToArray( material, textureKey, array, offset ) {\n\n\t\t\tlet texture;\n\t\t\tif ( threeCompatibilityTransforms ) {\n\n\t\t\t\ttexture = getUVTransformTexture( material );\n\n\t\t\t} else {\n\n\t\t\t\ttexture = material[ textureKey ] && material[ textureKey ].isTexture ? material[ textureKey ] : null;\n\n\t\t\t}\n\n\t\t\t// check if texture exists\n\t\t\tif ( texture ) {\n\n\t\t\t\tconst elements = texture.matrix.elements;\n\n\t\t\t\tlet i = 0;\n\n\t\t\t\t// first row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 0 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 3 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 6 ];\n\t\t\t\ti ++;\n\n\t\t\t\t// second row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 1 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 4 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 7 ];\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn 8;\n\n\t\t}\n\n\t\tlet index = 0;\n\t\tconst pixelCount = materials.length * MATERIAL_PIXELS;\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\n\t\tconst { threeCompatibilityTransforms, image } = this;\n\n\t\tif ( image.width !== dimension ) {\n\n\t\t\tthis.dispose();\n\n\t\t\timage.data = new Float32Array( dimension * dimension * 4 );\n\t\t\timage.width = dimension;\n\t\t\timage.height = dimension;\n\n\t\t}\n\n\t\tconst floatArray = image.data;\n\n\t\t// on some devices (Google Pixel 6) the \"floatBitsToInt\" function does not work correctly so we\n\t\t// can't encode texture ids that way.\n\t\t// const intArray = new Int32Array( floatArray.buffer );\n\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tconst m = materials[ i ];\n\n\t\t\t// sample 0\n\t\t\t// color\n\t\t\tfloatArray[ index ++ ] = m.color.r;\n\t\t\tfloatArray[ index ++ ] = m.color.g;\n\t\t\tfloatArray[ index ++ ] = m.color.b;\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'map' );\n\n\t\t\t// sample 1\n\t\t\t// metalness & roughness\n\t\t\tfloatArray[ index ++ ] = getField( m, 'metalness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = textures.indexOf( m.metalnessMap );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'roughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = textures.indexOf( m.roughnessMap );\n\n\t\t\t// sample 2\n\t\t\t// transmission & emissiveIntensity\n\t\t\t// three.js assumes a default f0 of 0.04 if no ior is provided which equates to an ior of 1.5\n\t\t\tfloatArray[ index ++ ] = getField( m, 'ior', 1.5 );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'transmission', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'transmissionMap' );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'emissiveIntensity', 0.0 );\n\n\t\t\t// sample 3\n\t\t\t// emission\n\t\t\tif ( 'emissive' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.r;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.g;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'emissiveMap' );\n\n\t\t\t// sample 4\n\t\t\t// normals\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'normalMap' );\n\t\t\tif ( 'normalScale' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.x;\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.y;\n\n \t\t\t} else {\n\n \t\t\t\tfloatArray[ index ++ ] = 1;\n \t\t\t\tfloatArray[ index ++ ] = 1;\n\n \t\t\t}\n\n\t\t\t// clearcoat\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoat', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatMap' ); // sample 5\n\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoatRoughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatRoughnessMap' );\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatNormalMap' );\n\n\t\t\t// sample 6\n\t\t\tif ( 'clearcoatNormalScale' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.x;\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.y;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1;\n\t\t\t\tfloatArray[ index ++ ] = 1;\n\n\t\t\t}\n\n\t\t\tindex ++;\n\t\t\tindex ++;\n\n\t\t\t// sample 7\n\t\t\t// sheen\n\t\t\tif ( 'sheenColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenColorMap' );\n\n\t\t\t// sample 8\n\t\t\tfloatArray[ index ++ ] = getField( m, 'sheenRoughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenRoughnessMap' );\n\n\t\t\t// iridescence\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceMap' );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceThicknessMap' );\n\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescence', 0.0 ); // sample 9\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescenceIOR', 1.3 );\n\n\t\t\tconst iridescenceThicknessRange = getField( m, 'iridescenceThicknessRange', [ 100, 400 ] );\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 0 ];\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 1 ];\n\n\t\t\t// sample 10\n\t\t\t// specular color\n\t\t\tif ( 'specularColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularColorMap' );\n\n\t\t\t// sample 11\n\t\t\t// specular intensity\n\t\t\tfloatArray[ index ++ ] = getField( m, 'specularIntensity', 1.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularIntensityMap' );\n\n\t\t\t// thickness\n\t\t\tfloatArray[ index ++ ] = getField( m, 'thickness', 0.0 ) === 0.0 && getField( m, 'attenuationDistance', Infinity ) === Infinity;\n\t\t\tindex ++;\n\n\t\t\t// sample 12\n\t\t\tif ( 'attenuationColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getField( m, 'attenuationDistance', Infinity );\n\n\t\t\t// sample 13\n\t\t\t// alphaMap\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'alphaMap' );\n\n\t\t\t// side & matte\n\t\t\tfloatArray[ index ++ ] = m.opacity;\n\t\t\tfloatArray[ index ++ ] = m.alphaTest;\n\t\t\tindex ++; // side\n\n\t\t\t// sample 14\n\t\t\tindex ++; // matte\n\t\t\tindex ++; // shadow\n\t\t\tfloatArray[ index ++ ] = Number( m.vertexColors ); // vertexColors\n\t\t\tfloatArray[ index ++ ] = Number( m.transparent ); // transparent\n\n\t\t\t// map transform 15\n\t\t\tindex += writeTextureMatrixToArray( m, 'map', floatArray, index );\n\n\t\t\t// metalnessMap transform 17\n\t\t\tindex += writeTextureMatrixToArray( m, 'metalnessMap', floatArray, index );\n\n\t\t\t// roughnessMap transform 19\n\t\t\tindex += writeTextureMatrixToArray( m, 'roughnessMap', floatArray, index );\n\n\t\t\t// transmissionMap transform 21\n\t\t\tindex += writeTextureMatrixToArray( m, 'transmissionMap', floatArray, index );\n\n\t\t\t// emissiveMap transform 22\n\t\t\tindex += writeTextureMatrixToArray( m, 'emissiveMap', floatArray, index );\n\n\t\t\t// normalMap transform 25\n\t\t\tindex += writeTextureMatrixToArray( m, 'normalMap', floatArray, index );\n\n\t\t\t// clearcoatMap transform 27\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatMap', floatArray, index );\n\n\t\t\t// clearcoatNormalMap transform 29\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatNormalMap', floatArray, index );\n\n\t\t\t// clearcoatRoughnessMap transform 31\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatRoughnessMap', floatArray, index );\n\n\t\t\t// sheenColorMap transform 33\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenColorMap', floatArray, index );\n\n\t\t\t// sheenRoughnessMap transform 35\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenRoughnessMap', floatArray, index );\n\n\t\t\t// iridescenceMap transform 37\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceMap', floatArray, index );\n\n\t\t\t// iridescenceThicknessMap transform 39\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceThicknessMap', floatArray, index );\n\n\t\t\t// specularColorMap transform 41\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularColorMap', floatArray, index );\n\n\t\t\t// specularIntensityMap transform 43\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularIntensityMap', floatArray, index );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n","import {\n\tWebGLArrayRenderTarget,\n\tRGBAFormat,\n\tUnsignedByteType,\n\tMeshBasicMaterial,\n\tColor,\n\tRepeatWrapping,\n\tLinearFilter,\n\tNoToneMapping,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\n\nconst prevColor = new Color();\nexport class RenderTarget2DArray extends WebGLArrayRenderTarget {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconst tex = this.texture;\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = UnsignedByteType;\n\t\ttex.minFilter = LinearFilter;\n\t\ttex.magFilter = LinearFilter;\n\t\ttex.wrapS = RepeatWrapping;\n\t\ttex.wrapT = RepeatWrapping;\n\t\ttex.setTextures = ( ...args ) => {\n\n\t\t\tthis.setTextures( ...args );\n\n\t\t};\n\n\t\tconst fsQuad = new FullScreenQuad( new MeshBasicMaterial() );\n\t\tthis.fsQuad = fsQuad;\n\n\t}\n\n\tsetTextures( renderer, width, height, textures ) {\n\n\t\t// save previous renderer state\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevToneMapping = renderer.toneMapping;\n\t\tconst prevAlpha = renderer.getClearAlpha();\n\t\trenderer.getClearColor( prevColor );\n\n\t\t// resize the render target and ensure we don't have an empty texture\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\n\t\tconst depth = textures.length || 1;\n\t\tthis.setSize( width, height, depth );\n\t\trenderer.setClearColor( 0, 0 );\n\t\trenderer.toneMapping = NoToneMapping;\n\n\t\t// render each texture into each layer of the target\n\t\tconst fsQuad = this.fsQuad;\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\t\t\tif ( texture ) {\n\n\t\t\t\t// revert to default texture transform before rendering\n\t\t\t\ttexture.matrixAutoUpdate = false;\n\t\t\t\ttexture.matrix.identity();\n\n\t\t\t\tfsQuad.material.map = texture;\n\t\t\t\tfsQuad.material.transparent = true;\n\n\t\t\t\trenderer.setRenderTarget( this, i );\n\t\t\t\tfsQuad.render( renderer );\n\n\t\t\t\t// restore custom texture transform\n\t\t\t\ttexture.updateMatrix();\n\t\t\t\ttexture.matrixAutoUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset the renderer\n\t\tfsQuad.material.map = null;\n\t\trenderer.setClearColor( prevColor, prevAlpha );\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.toneMapping = prevToneMapping;\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n","import { shaderGGXFunctions } from './shaderGGXFunctions.js';\nimport { shaderSheenFunctions } from './shaderSheenFunctions.js';\nimport { shaderIridescenceFunctions } from './shaderIridescenceFunctions.js';\n\nexport const shaderMaterialSampling = /* glsl */`\n\nstruct SurfaceRec {\n\tvec3 normal;\n\tvec3 faceNormal;\n\tbool frontFace;\n\tfloat roughness;\n\tfloat filteredRoughness;\n\tfloat metalness;\n\tvec3 color;\n\tvec3 emission;\n\tfloat transmission;\n\tbool thinFilm;\n\tfloat ior;\n\tfloat iorRatio;\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n\tfloat filteredClearcoatRoughness;\n\tvec3 sheenColor;\n\tfloat sheenRoughness;\n\tfloat iridescence;\n\tfloat iridescenceIor;\n\tfloat iridescenceThickness;\n\tvec3 specularColor;\n\tfloat specularIntensity;\n\tvec3 attenuationColor;\n\tfloat attenuationDistance;\n};\n\nstruct SampleRec {\n\tfloat specularPdf;\n\tfloat pdf;\n\tvec3 direction;\n\tvec3 clearcoatDirection;\n\tvec3 color;\n};\n\n${ shaderGGXFunctions }\n${ shaderSheenFunctions }\n${ shaderIridescenceFunctions }\n\n// diffuse\nfloat diffusePDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html#lightscattering/thescatteringpdf\n\tfloat cosValue = wi.z;\n\treturn cosValue / PI;\n\n}\n\nvec3 diffuseDirection( vec3 wo, SurfaceRec surf ) {\n\n\tvec3 lightDirection = randDirection();\n\tlightDirection.z += 1.0;\n\tlightDirection = normalize( lightDirection );\n\n\treturn lightDirection;\n\n}\n\nvec3 diffuseColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// TODO: scale by 1 - F here\n\t// note on division by PI\n\t// https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\n\tfloat metalFactor = ( 1.0 - surf.metalness );\n\treturn surf.color * metalFactor * wi.z / PI;\n\n}\n\n// specular\nfloat specularPDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// See 14.1.1 Microfacet BxDFs in https://www.pbr-book.org/\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tvec3 halfVector = getHalfVector( wi, wo );\n\n\tfloat incidentTheta = acos( wo.z );\n\tfloat D = ggxDistribution( halfVector, filteredRoughness );\n\tfloat G1 = ggxShadowMaskG1( incidentTheta, filteredRoughness );\n\tfloat ggxPdf = D * G1 * max( 0.0, abs( dot( wo, halfVector ) ) ) / abs ( wo.z );\n\treturn ggxPdf / ( 4.0 * dot( wo, halfVector ) );\n\n}\n\nvec3 specularDirection( vec3 wo, SurfaceRec surf ) {\n\n\t// sample ggx vndf distribution which gives a new normal\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tfilteredRoughness,\n\t\tfilteredRoughness,\n\t\trand(),\n\t\trand()\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\treturn - reflect( wo, halfVector );\n\n}\n\nvec3 specularColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// if roughness is set to 0 then D === NaN which results in black pixels\n\tfloat metalness = surf.metalness;\n\tfloat filteredRoughness = surf.filteredRoughness;\n\n\tvec3 halfVector = getHalfVector( wo, wi );\n\tfloat iorRatio = surf.iorRatio;\n\tfloat G = ggxShadowMaskG2( wi, wo, filteredRoughness );\n\tfloat D = ggxDistribution( halfVector, filteredRoughness );\n\n\tfloat f0 = iorRatioToF0( iorRatio );\n\tvec3 F = vec3( schlickFresnel( dot( wi, halfVector ), f0 ) );\n\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\tF = vec3( 1.0 );\n\n\t}\n\n\tvec3 iridescenceFresnel = evalIridescence( 1.0, surf.iridescenceIor, dot( wi, halfVector ), surf.iridescenceThickness, vec3( f0 ) );\n\tvec3 metalF = mix( F, iridescenceFresnel, surf.iridescence );\n\tvec3 dialectricF = F * surf.specularIntensity;\n\tF = mix( dialectricF, metalF, metalness );\n\n\tvec3 color = mix( surf.specularColor, surf.color, metalness );\n\tcolor = mix( color, vec3( 1.0 ), F );\n\tcolor *= G * D / ( 4.0 * abs( wi.z * wo.z ) );\n\tcolor *= mix( F, vec3( 1.0 ), metalness );\n\tcolor *= wi.z; // scale the light by the direction the light is coming in from\n\n\treturn color;\n\n}\n\n/*\n// transmission\nfunction transmissionPDF( wo, wi, material, surf ) {\n\n\t// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\n\tconst { roughness, ior } = material;\n\tconst { frontFace } = hit;\n\tconst ratio = frontFace ? ior : 1 / ior;\n\tconst minRoughness = Math.max( roughness, MIN_ROUGHNESS );\n\n\thalfVector.set( 0, 0, 0 ).addScaledVector( wi, ratio ).addScaledVector( wo, 1.0 ).normalize().multiplyScalar( - 1 );\n\n\tconst denom = Math.pow( ratio * halfVector.dot( wi ) + 1.0 * halfVector.dot( wo ), 2.0 );\n\treturn ggxPDF( wo, halfVector, minRoughness ) / denom;\n\n}\n\nfunction transmissionDirection( wo, hit, material, lightDirection ) {\n\n\tconst { roughness, ior } = material;\n\tconst { frontFace } = hit;\n\tconst ratio = frontFace ? 1 / ior : ior;\n\tconst minRoughness = Math.max( roughness, MIN_ROUGHNESS );\n\n\t// sample ggx vndf distribution which gives a new normal\n\tggxDirection(\n\t\two,\n\t\tminRoughness,\n\t\tminRoughness,\n\t\tMath.random(),\n\t\tMath.random(),\n\t\thalfVector,\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\ttempDir.copy( wo ).multiplyScalar( - 1 );\n\trefract( tempDir, halfVector, ratio, lightDirection );\n\n}\n\nfunction transmissionColor( wo, wi, material, hit, colorTarget ) {\n\n\tconst { metalness, transmission } = material;\n\tcolorTarget\n\t\t.copy( material.color )\n\t\t.multiplyScalar( ( 1.0 - metalness ) * wo.z )\n\t\t.multiplyScalar( transmission );\n\n}\n*/\n\n// TODO: This is just using a basic cosine-weighted specular distribution with an\n// incorrect PDF value at the moment. Update it to correctly use a GGX distribution\nfloat transmissionPDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat iorRatio = surf.iorRatio;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, iorRatio );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 1.0 - reflectance );\n\n}\n\nvec3 transmissionDirection( vec3 wo, SurfaceRec surf ) {\n\n\tfloat roughness = surf.roughness;\n\tfloat iorRatio = surf.iorRatio;\n\n\tvec3 halfVector = normalize( vec3( 0.0, 0.0, 1.0 ) + randDirection() * roughness );\n\tvec3 lightDirection = refract( normalize( - wo ), halfVector, iorRatio );\n\n\tif ( surf.thinFilm ) {\n\n\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / iorRatio );\n\n\t}\n\treturn normalize( lightDirection );\n\n}\n\nvec3 transmissionColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// only attenuate the color if it's on the way in\n\tvec3 col = surf.thinFilm || surf.frontFace ? surf.color : vec3( 1.0 );\n\treturn surf.transmission * col;\n\n}\n\n// clearcoat\nfloat clearcoatPDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// See equation (27) in http://jcgt.org/published/0003/02/03/\n\tfloat filteredClearcoatRoughness = surf.filteredClearcoatRoughness;\n\tvec3 halfVector = getHalfVector( wi, wo );\n\treturn ggxPDF( wo, halfVector, filteredClearcoatRoughness ) / ( 4.0 * dot( wi, halfVector ) );\n\n}\n\nvec3 clearcoatDirection( vec3 wo, SurfaceRec surf ) {\n\n\t// sample ggx vndf distribution which gives a new normal\n\tfloat filteredClearcoatRoughness = surf.filteredClearcoatRoughness;\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tfilteredClearcoatRoughness,\n\t\tfilteredClearcoatRoughness,\n\t\trand(),\n\t\trand()\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\treturn - reflect( wo, halfVector );\n\n}\n\nvoid clearcoatColor( inout vec3 color, vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat ior = 1.5;\n\tbool frontFace = surf.frontFace;\n\tfloat filteredClearcoatRoughness = surf.filteredClearcoatRoughness;\n\n\tvec3 halfVector = getHalfVector( wo, wi );\n\tfloat iorRatio = frontFace ? 1.0 / ior : ior;\n\tfloat G = ggxShadowMaskG2( wi, wo, filteredClearcoatRoughness );\n\tfloat D = ggxDistribution( halfVector, filteredClearcoatRoughness );\n\n\tfloat F = schlickFresnelFromIor( dot( wi, halfVector ), ior );\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\tF = 1.0;\n\n\t}\n\n\tfloat fClearcoat = F * D * G / ( 4.0 * abs( wi.z * wo.z ) );\n\n\tcolor = color * ( 1.0 - surf.clearcoat * F ) + fClearcoat * surf.clearcoat * wi.z;\n\n}\n\n// sheen\nvec3 sheenColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tvec3 halfVector = getHalfVector( wo, wi );\n\n\tfloat cosThetaO = saturateCos( wo.z );\n\tfloat cosThetaI = saturateCos( wi.z );\n\tfloat cosThetaH = halfVector.z;\n\n\tfloat D = velvetD( cosThetaH, surf.sheenRoughness );\n\tfloat G = velvetG( cosThetaO, cosThetaI, surf.sheenRoughness );\n\n\t// See equation (1) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tvec3 color = surf.sheenColor;\n\tcolor *= D * G / ( 4.0 * abs( cosThetaO * cosThetaI ) );\n\tcolor *= wi.z;\n\n\treturn color;\n\n}\n\n// bsdf\nvoid getLobeWeights( vec3 wo, vec3 clearcoatWo, SurfaceRec surf, out float diffuseWeight, out float specularWeight, out float transmissionWeight, out float clearcoatWeight ) {\n\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\n\t// TODO: we should compute a half vector ahead of time and pass it into the sampling functions\n\t// so all functions will use the same half vector\n\tfloat iorRatio = surf.iorRatio;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, iorRatio );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tfloat transSpecularProb = mix( reflectance, 1.0, metalness );\n\tfloat diffSpecularProb = 0.5 + 0.5 * metalness;\n\n\tclearcoatWeight = surf.clearcoat * schlickFresnel( clearcoatWo.z, 0.04 );\n\tdiffuseWeight = ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb ) * ( 1.0 - clearcoatWeight );\n\tspecularWeight = transmission * transSpecularProb + ( 1.0 - transmission ) * diffSpecularProb * ( 1.0 - clearcoatWeight );\n\ttransmissionWeight = transmission * ( 1.0 - transSpecularProb ) * ( 1.0 - clearcoatWeight );\n\n\tfloat totalWeight = diffuseWeight + specularWeight + transmissionWeight + clearcoatWeight;\n\tdiffuseWeight /= totalWeight;\n\tspecularWeight /= totalWeight;\n\ttransmissionWeight /= totalWeight;\n\tclearcoatWeight /= totalWeight;\n\n}\n\nfloat bsdfPdf( vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRec surf, out float specularPdf, float diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight ) {\n\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\n\tfloat iorRatio = surf.iorRatio;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, iorRatio );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tfloat spdf = 0.0;\n\tfloat dpdf = 0.0;\n\tfloat tpdf = 0.0;\n\tfloat cpdf = 0.0;\n\n\tif ( wi.z < 0.0 ) {\n\n\t\tif( transmissionWeight > 0.0 ) {\n\n\t\t\ttpdf = transmissionPDF( wo, wi, surf );\n\n\t\t}\n\n\t} else {\n\n\t\tif( diffuseWeight > 0.0 ) {\n\n\t\t\tdpdf = diffusePDF( wo, wi, surf );\n\n\t\t}\n\n\t\tif( specularWeight > 0.0 ) {\n\n\t\t\tspdf = specularPDF( wo, wi, surf );\n\n\t\t}\n\n\t}\n\n\tif( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {\n\n\t\tcpdf = clearcoatPDF( clearcoatWo, clearcoatWi, surf );\n\n\t}\n\n\tfloat pdf =\n\t\t  dpdf * diffuseWeight\n\t\t+ spdf * specularWeight\n\t\t+ tpdf * transmissionWeight\n\t\t+ cpdf * clearcoatWeight;\n\n\t// retrieve specular rays for the shadows flag\n\tspecularPdf = spdf * specularWeight + cpdf * clearcoatWeight;\n\n\treturn pdf;\n\n}\n\nvec3 bsdfColor( vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRec surf, float diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight ) {\n\n\tvec3 color = vec3( 0.0 );\n\tif ( wi.z < 0.0 ) {\n\n\t\tif( transmissionWeight > 0.0 ) {\n\n\t\t\tcolor = transmissionColor( wo, wi, surf );\n\n\t\t}\n\n\t} else {\n\n\t\tif( diffuseWeight > 0.0 ) {\n\n\t\t\tcolor = diffuseColor( wo, wi, surf );\n\t\t\tcolor *= 1.0 - surf.transmission;\n\n\t\t}\n\n\t\tif( specularWeight > 0.0 ) {\n\n\t\t\tcolor += specularColor( wo, wi, surf );\n\n\t\t}\n\n\t\tcolor *= sheenAlbedoScaling( wo, wi, surf );\n\t\tcolor += sheenColor( wo, wi, surf );\n\n\t}\n\n\tif( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {\n\n\t\tclearcoatColor( color, clearcoatWo, clearcoatWi, surf );\n\n\t}\n\n\treturn color;\n\n}\n\nfloat bsdfResult( vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRec surf, out vec3 color ) {\n\n\tfloat diffuseWeight;\n\tfloat specularWeight;\n\tfloat transmissionWeight;\n\tfloat clearcoatWeight;\n\tgetLobeWeights( wo, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\tfloat specularPdf;\n\tcolor = bsdfColor( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\treturn bsdfPdf( wo, clearcoatWo, wi, clearcoatWi, surf, specularPdf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n}\n\nSampleRec bsdfSample( vec3 wo, vec3 clearcoatWo, mat3 normalBasis, mat3 invBasis, mat3 clearcoatNormalBasis, mat3 clearcoatInvBasis, SurfaceRec surf ) {\n\n\tfloat diffuseWeight;\n\tfloat specularWeight;\n\tfloat transmissionWeight;\n\tfloat clearcoatWeight;\n\tgetLobeWeights( wo, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\tfloat pdf[4];\n\tpdf[0] = diffuseWeight;\n\tpdf[1] = specularWeight;\n\tpdf[2] = transmissionWeight;\n\tpdf[3] = clearcoatWeight;\n\n\tfloat cdf[4];\n\tcdf[0] = pdf[0];\n\tcdf[1] = pdf[1] + cdf[0];\n\tcdf[2] = pdf[2] + cdf[1];\n\tcdf[3] = pdf[3] + cdf[2];\n\n\tif( cdf[3] != 0.0 ) {\n\n\t\tfloat invMaxCdf = 1.0 / cdf[3];\n\t\tcdf[0] *= invMaxCdf;\n\t\tcdf[1] *= invMaxCdf;\n\t\tcdf[2] *= invMaxCdf;\n\t\tcdf[3] *= invMaxCdf;\n\n\t} else {\n\n\t\tcdf[0] = 1.0;\n\t\tcdf[1] = 0.0;\n\t\tcdf[2] = 0.0;\n\t\tcdf[3] = 0.0;\n\n\t}\n\n\tvec3 wi;\n\tvec3 clearcoatWi;\n\n\tfloat r = rand();\n\tif ( r <= cdf[0] ) { // diffuse\n\n\t\twi = diffuseDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[1] ) { // specular\n\n\t\twi = specularDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[2] ) { // transmission / refraction\n\n\t\twi = transmissionDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[3] ) { // clearcoat\n\n\t\tclearcoatWi = clearcoatDirection( clearcoatWo, surf );\n\t\twi = normalize( invBasis * normalize( clearcoatNormalBasis * clearcoatWi ) );\n\n\t}\n\n\tSampleRec result;\n\tresult.pdf = bsdfPdf( wo, clearcoatWo, wi, clearcoatWi, surf, result.specularPdf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\tresult.color = bsdfColor( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\tresult.direction = wi;\n\tresult.clearcoatDirection = clearcoatWi;\n\n\treturn result;\n\n}\n`;\n","export const shaderGGXFunctions = /* glsl */`\n// The GGX functions provide sampling and distribution information for normals as output so\n// in order to get probability of scatter direction the half vector must be computed and provided.\n// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n// [2] http://jcgt.org/published/0007/04/01/\n// [4] http://jcgt.org/published/0003/02/03/\n\n// trowbridge-reitz === GGX === GTR\n\nvec3 ggxDirection( vec3 incidentDir, float roughnessX, float roughnessY, float random1, float random2 ) {\n\n\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t// function below, as well\n\n\t// Implementation from reference [1]\n\t// stretch view\n\tvec3 V = normalize( vec3( roughnessX * incidentDir.x, roughnessY * incidentDir.y, incidentDir.z ) );\n\n\t// orthonormal basis\n\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\tvec3 T2 = cross( T1, V );\n\n\t// sample point with polar coordinates (r, phi)\n\tfloat a = 1.0 / ( 1.0 + V.z );\n\tfloat r = sqrt( random1 );\n\tfloat phi = ( random2 < a ) ? random2 / a * PI : PI + ( random2 - a ) / ( 1.0 - a ) * PI;\n\tfloat P1 = r * cos( phi );\n\tfloat P2 = r * sin( phi ) * ( ( random2 < a ) ? 1.0 : V.z );\n\n\t// compute normal\n\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t// unstretch\n\tN = normalize( vec3( roughnessX * N.x, roughnessY * N.y, max( 0.0, N.z ) ) );\n\n\treturn N;\n\n}\n\n// Below are PDF and related functions for use in a Monte Carlo path tracer\n// as specified in Appendix B of the following paper\n// See equation (34) from reference [0]\nfloat ggxLamda( float theta, float roughness ) {\n\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = tanTheta * tanTheta;\n\tfloat alpha2 = roughness * roughness;\n\n\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\treturn numerator / 2.0;\n\n}\n\n// See equation (34) from reference [0]\nfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n}\n\n// See equation (125) from reference [4]\nfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat scatterTheta = acos( wo.z );\n\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n}\n\n// See equation (33) from reference [0]\nfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\tfloat a2 = roughness * roughness;\n\ta2 = max( EPSILON, a2 );\n\tfloat cosTheta = halfVector.z;\n\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\tif ( cosTheta == 0.0 ) return 0.0;\n\n\tfloat theta = acosSafe( halfVector.z );\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\treturn ( a2 / denom );\n\n}\n\n// See equation (3) from reference [2]\nfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat D = ggxDistribution( halfVector, roughness );\n\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n}\n`;\n","export const shaderSheenFunctions = /* glsl */`\n\n// See equation (2) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetD( float cosThetaH, float roughness ) {\n\n\tfloat alpha = max( roughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat invAlpha = 1.0 / alpha;\n\n\tfloat sqrCosThetaH = cosThetaH * cosThetaH;\n\tfloat sinThetaH = max( 1.0 - sqrCosThetaH, 0.001 );\n\n\treturn ( 2.0 + invAlpha ) * pow( sinThetaH, 0.5 * invAlpha ) / ( 2.0 * PI );\n\n}\n\nfloat velvetParamsInterpolate( int i, float oneMinusAlphaSquared ) {\n\n\tconst float p0[5] = float[5]( 25.3245, 3.32435, 0.16801, -1.27393, -4.85967 );\n\tconst float p1[5] = float[5]( 21.5473, 3.82987, 0.19823, -1.97760, -4.32054 );\n\n\treturn mix( p1[i], p0[i], oneMinusAlphaSquared );\n\n}\n\nfloat velvetL( float x, float alpha ) {\n\n\tfloat oneMinusAlpha = 1.0 - alpha;\n\tfloat oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha;\n\n\tfloat a = velvetParamsInterpolate( 0, oneMinusAlphaSquared );\n\tfloat b = velvetParamsInterpolate( 1, oneMinusAlphaSquared );\n\tfloat c = velvetParamsInterpolate( 2, oneMinusAlphaSquared );\n\tfloat d = velvetParamsInterpolate( 3, oneMinusAlphaSquared );\n\tfloat e = velvetParamsInterpolate( 4, oneMinusAlphaSquared );\n\n\treturn a / ( 1.0 + b * pow( abs( x ), c ) ) + d * x + e;\n\n}\n\n// See equation (3) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetLambda( float cosTheta, float alpha ) {\n\n\treturn abs( cosTheta ) < 0.5 ? exp( velvetL( cosTheta, alpha ) ) : exp( 2.0 * velvetL( 0.5, alpha ) - velvetL( 1.0 - cosTheta, alpha ) );\n\n}\n\n// See Section 3, Shadowing Term, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetG( float cosThetaO, float cosThetaI, float roughness ) {\n\n\tfloat alpha = max( roughness, 0.07 );\n\talpha = alpha * alpha;\n\n\treturn 1.0 / ( 1.0 + velvetLambda( cosThetaO, alpha ) + velvetLambda( cosThetaI, alpha ) );\n\n}\n\nfloat directionalAlbedoSheen( float cosTheta, float alpha ) {\n\n\tcosTheta = saturate( cosTheta );\n\n\tfloat c = 1.0 - cosTheta;\n\tfloat c3 = c * c * c;\n\n\treturn 0.65584461 * c3 + 1.0 / ( 4.16526551 + exp( -7.97291361 * sqrt( alpha ) + 6.33516894 ) );\n\n}\n\nfloat sheenAlbedoScaling( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\tfloat eWi = directionalAlbedoSheen( saturateCos( wi.z ), alpha );\n\n\treturn min( 1.0 - maxSheenColor * eWo, 1.0 - maxSheenColor * eWi );\n\n}\n\n// See Section 5, Layering, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat sheenAlbedoScaling( vec3 wo, SurfaceRec surf ) {\n\n\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\n\treturn 1.0 - maxSheenColor * eWo;\n\n}\n\n`;\n","export const shaderIridescenceFunctions = /* glsl */`\n\n// XYZ to sRGB color space\nconst mat3 XYZ_TO_REC709 = mat3(\n\t 3.2404542, -0.9692660,  0.0556434,\n\t-1.5371385,  1.8760108, -0.2040259,\n\t-0.4985314,  0.0415560,  1.0572252\n);\n\nvec3 fresnel0ToIor( vec3 fresnel0 ) {\n\n\tvec3 sqrtF0 = sqrt( fresnel0 );\n\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\n}\n\n// Conversion FO/IOR\nvec3 iorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\n\treturn square( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\n}\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nfloat iorToFresnel0( float transmittedIor, float incidentIor ) {\n\n\treturn square( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ) );\n\n}\n\n// Fresnel equations for dielectric/dielectric interfaces. See https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n\n\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\n\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - square( phase ) * var );\n\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * square( phase ) );\n\txyz /= 1.0685e-7;\n\n\tvec3 srgb = XYZ_TO_REC709 * xyz;\n\treturn srgb;\n\n}\n\n// See Section 4. Analytic Spectral Integration, A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence, https://hal.archives-ouvertes.fr/hal-01518344/document\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\n\tvec3 I;\n\n\t// Force iridescenceIor -> outsideIOR when thinFilmThickness -> 0.0\n\tfloat iridescenceIor = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tfloat sinTheta2Sq = square( outsideIOR / iridescenceIor ) * ( 1.0 - square( cosTheta1 ) );\n\n\t// Handle TIR:\n\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\tif ( cosTheta2Sq < 0.0 ) {\n\n\t\treturn vec3( 1.0 );\n\n\t}\n\n\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\n\t// First interface\n\tfloat R0 = iorToFresnel0( iridescenceIor, outsideIOR );\n\tfloat R12 = schlickFresnel( cosTheta1, R0 );\n\tfloat R21 = R12;\n\tfloat T121 = 1.0 - R12;\n\tfloat phi12 = 0.0;\n\tif ( iridescenceIor < outsideIOR ) {\n\n\t\tphi12 = PI;\n\n\t}\n\tfloat phi21 = PI - phi12;\n\n\t// Second interface\n\tvec3 baseIOR = fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\n\tvec3 R1 = iorToFresnel0( baseIOR, iridescenceIor );\n\tvec3 R23 = schlickFresnel( cosTheta2, R1 );\n\tvec3 phi23 = vec3( 0.0 );\n\tif ( baseIOR[0] < iridescenceIor ) {\n\n\t\tphi23[ 0 ] = PI;\n\n\t}\n\tif ( baseIOR[1] < iridescenceIor ) {\n\n\t\tphi23[ 1 ] = PI;\n\n\t}\n\tif ( baseIOR[2] < iridescenceIor ) {\n\n\t\tphi23[ 2 ] = PI;\n\n\t}\n\n\t// Phase shift\n\tfloat OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\n\tvec3 phi = vec3( phi21 ) + phi23;\n\n\t// Compound terms\n\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\tvec3 r123 = sqrt( R123 );\n\tvec3 Rs = square( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tvec3 C0 = R12 + Rs;\n\tI = C0;\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tvec3 Cm = Rs - T121;\n\tfor ( int m = 1; m <= 2; ++ m )\n\t{\n\t\tCm *= r123;\n\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\tI += Cm * Sm;\n\t}\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn max( I, vec3( 0.0 ) );\n}\n\n`;\n","export const shaderEnvMapSampling = /* glsl */`\n\nvec3 sampleEquirectEnvMapColor( vec3 direction, sampler2D map ) {\n\n\treturn texture2D( map, equirectDirectionToUv( direction ) ).rgb;\n\n}\n\nfloat envMapDirectionPdf( vec3 direction ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tfloat theta = uv.y * PI;\n\tfloat sinTheta = sin( theta );\n\tif ( sinTheta == 0.0 ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 2.0 * PI * PI * sinTheta );\n\n}\n\nfloat envMapSample( vec3 direction, EquirectHdrInfo info, out vec3 color ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\tfloat lum = colorToLuminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\nfloat randomEnvMapSample( EquirectHdrInfo info, out vec3 color, out vec3 direction ) {\n\n\t// sample env map cdf\n\tvec2 r = rand2();\n\tfloat v = texture2D( info.marginalWeights, vec2( r.x, 0.0 ) ).x;\n\tfloat u = texture2D( info.conditionalWeights, vec2( r.y, v ) ).x;\n\tvec2 uv = vec2( u, v );\n\n\tvec3 derivedDirection = equirectUvToDirection( uv );\n\tdirection = derivedDirection;\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\tfloat lum = colorToLuminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\n`;\n","export const shaderLightSampling = /* glsl */`\n\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n}\n\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), EPSILON );\n\n\tif ( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n}\n\nfloat getPhotometricAttenuation( sampler2DArray iesProfiles, int iesProfile, vec3 posToLight, vec3 lightDir, vec3 u, vec3 v ) {\n\n    float cosTheta = dot( posToLight, lightDir );\n    float angle = acos( cosTheta ) * ( 1.0 / PI );\n\n    return texture2D( iesProfiles, vec3( 0.0, angle, iesProfile ) ).r;\n\n}\n\nstruct LightSampleRec {\n\n\tbool hit;\n\tfloat dist;\n\tvec3 direction;\n\tfloat pdf;\n\tvec3 emission;\n\tint type;\n\n};\n\nLightSampleRec lightsClosestHit( sampler2D lights, uint lightCount, vec3 rayOrigin, vec3 rayDirection ) {\n\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = false;\n\n\tuint l;\n\tfor ( l = 0u; l < lightCount; l ++ ) {\n\n\t\tLight light = readLightInfo( lights, l );\n\n\t\tvec3 u = light.u;\n\t\tvec3 v = light.v;\n\n\t\t// check for backface\n\t\tvec3 normal = normalize( cross( u, v ) );\n\t\tif ( dot( normal, rayDirection ) < 0.0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tu *= 1.0 / dot( u, u );\n\t\tv *= 1.0 / dot( v, v );\n\n\t\tfloat dist;\n\n\t\tif(\n\t\t\t( light.type == RECT_AREA_LIGHT_TYPE && intersectsRectangle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) ) ||\n\t\t\t( light.type == CIRC_AREA_LIGHT_TYPE && intersectsCircle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) )\n\t\t) {\n\n\t\t\tif ( dist < lightSampleRec.dist || ! lightSampleRec.hit ) {\n\n\t\t\t\tfloat cosTheta = dot( rayDirection, normal );\n\n\t\t\t\tlightSampleRec.hit = true;\n\t\t\t\tlightSampleRec.dist = dist;\n\t\t\t\tlightSampleRec.pdf = ( dist * dist ) / ( light.area * cosTheta );\n\t\t\t\tlightSampleRec.emission = light.color * light.intensity;\n\t\t\t\tlightSampleRec.direction = rayDirection;\n\t\t\t\tlightSampleRec.type = light.type;\n\n\t\t\t}\n\n\t\t} else if ( light.type == SPOT_LIGHT_TYPE ) {\n\n\t\t\t// TODO: forward path tracing sampling needs to be made consistent with direct light sampling logic\n\t\t\t// float radius = light.radius;\n\t\t\t// vec3 lightNormal = normalize( cross( light.u, light.v ) );\n\t\t\t// float angle = acos( light.coneCos );\n\t\t\t// float angleTan = tan( angle );\n\t\t\t// float startDistance = radius / max( angleTan, EPSILON );\n\n\t\t\t// u = light.u / radius;\n\t\t\t// v = light.v / radius;\n\n\t\t\t// if (\n\t\t\t// \tintersectsCircle( light.position - normal * startDistance, normal, u, v, rayOrigin, rayDirection, dist ) &&\n\t\t\t// \t( dist < lightSampleRec.dist || ! lightSampleRec.hit )\n\t\t\t// ) {\n\n\t\t\t// \tfloat cosTheta = dot( rayDirection, normal );\n\t\t\t// \tfloat spotAttenuation = light.iesProfile != - 1 ?\n\t\t\t// \t\tgetPhotometricAttenuation( iesProfiles, light.iesProfile, rayDirection, normal, u, v )\n\t\t\t// \t\t: getSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );\n\n\t\t\t// \tfloat distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );\n\n\t\t\t// \tlightSampleRec.hit = true;\n\t\t\t// \tlightSampleRec.dist = dist;\n\t\t\t// \tlightSampleRec.direction = rayDirection;\n\t\t\t// \tlightSampleRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;\n\t\t\t// \tlightSampleRec.pdf = ( dist * dist ) / ( light.area * cosTheta );\n\n\t\t\t// }\n\n\t\t}\n\n\t}\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomAreaLightSample( Light light, vec3 rayOrigin ) {\n\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = true;\n\tlightSampleRec.type = light.type;\n\n\tlightSampleRec.emission = light.color * light.intensity;\n\n\tvec3 randomPos;\n\tif( light.type == RECT_AREA_LIGHT_TYPE ) {\n\n\t\t// rectangular area light\n\t\trandomPos = light.position + light.u * ( rand() - 0.5 ) + light.v * ( rand() - 0.5 );\n\n\t} else if( light.type == 1 ) {\n\n\t\t// circular area light\n\t\tfloat r = 0.5 * sqrt( rand() );\n\t\tfloat theta = rand() * 2.0 * PI;\n\t\tfloat x = r * cos( theta );\n\t\tfloat y = r * sin( theta );\n\n\t\trandomPos = light.position + light.u * x + light.v * y;\n\n\t}\n\n\tvec3 toLight = randomPos - rayOrigin;\n\tfloat lightDistSq = dot( toLight, toLight );\n\tlightSampleRec.dist = sqrt( lightDistSq );\n\n\tvec3 direction = toLight / lightSampleRec.dist;\n\tlightSampleRec.direction = direction;\n\n\tvec3 lightNormal = normalize( cross( light.u, light.v ) );\n\tlightSampleRec.pdf = lightDistSq / ( light.area * dot( direction, lightNormal ) );\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomSpotLightSample( Light light, sampler2DArray iesProfiles, vec3 rayOrigin ) {\n\n\tfloat radius = light.radius * sqrt( rand() );\n\tfloat theta = rand() * 2.0 * PI;\n\tfloat x = radius * cos( theta );\n\tfloat y = radius * sin( theta );\n\n\tvec3 u = light.u;\n\tvec3 v = light.v;\n\tvec3 normal = normalize( cross( u, v ) );\n\n\tfloat angle = acos( light.coneCos );\n\tfloat angleTan = tan( angle );\n\tfloat startDistance = light.radius / max( angleTan, EPSILON );\n\n\tvec3 randomPos = light.position - normal * startDistance + u * x + v * y;\n\tvec3 toLight = randomPos - rayOrigin;\n\tfloat lightDistSq = dot( toLight, toLight );\n\tfloat dist = sqrt( lightDistSq );\n\n\tvec3 direction = toLight / max( dist, EPSILON );\n\tfloat cosTheta = dot( direction, normal );\n\n\tfloat spotAttenuation = light.iesProfile != - 1 ?\n\t\t  getPhotometricAttenuation( iesProfiles, light.iesProfile, direction, normal, u, v )\n\t\t: getSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );\n\n\tfloat distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = true;\n\tlightSampleRec.type = light.type;\n\tlightSampleRec.dist = dist;\n\tlightSampleRec.direction = direction;\n\tlightSampleRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;\n\n\t// TODO: this makes the result consistent between MIS and non MIS paths but at radius 0 the pdf is infinite\n\t// and the intensity of the light is not correct\n\tlightSampleRec.pdf = 1.0;\n\t// lightSampleRec.pdf = lightDistSq / ( light.area * cosTheta );\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomLightSample( sampler2D lights, sampler2DArray iesProfiles, uint lightCount, vec3 rayOrigin ) {\n\n\t// pick a random light\n\tuint l = uint( rand() * float( lightCount ) );\n\tLight light = readLightInfo( lights, l );\n\n\tif ( light.type == SPOT_LIGHT_TYPE ) {\n\n\t\treturn randomSpotLightSample( light, iesProfiles, rayOrigin );\n\n\t} else {\n\n\t\t// sample the light\n\t\treturn randomAreaLightSample( light, rayOrigin );\n\n\t}\n\n}\n\n`;\n","import { PhysicalCamera } from '../objects/PhysicalCamera.js';\nexport class PhysicalCameraUniform {\n\n\tconstructor() {\n\n\t\tthis.bokehSize = 0;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 10;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n\tupdateFrom( camera ) {\n\n\t\tif ( camera instanceof PhysicalCamera ) {\n\n\t\t\tthis.bokehSize = camera.bokehSize;\n\t\t\tthis.apertureBlades = camera.apertureBlades;\n\t\t\tthis.apertureRotation = camera.apertureRotation;\n\t\t\tthis.focusDistance = camera.focusDistance;\n\t\t\tthis.anamorphicRatio = camera.anamorphicRatio;\n\n\t\t} else {\n\n\t\t\tthis.bokehSize = 0;\n\t\t\tthis.apertureRotation = 0;\n\t\t\tthis.apertureBlades = 0;\n\t\t\tthis.focusDistance = 10;\n\t\t\tthis.anamorphicRatio = 1;\n\n\t\t}\n\n\t}\n\n}\n","import { DataTexture, FloatType, RedFormat, LinearFilter, DataUtils, HalfFloatType, Source, RepeatWrapping } from 'three';\n\nfunction binarySearchFindClosestIndexOf( array, targetValue, offset = 0, count = array.length ) {\n\n\tlet lower = 0;\n\tlet upper = count;\n\twhile ( lower < upper ) {\n\n\t\tconst mid = ~ ~ ( 0.5 * upper + 0.5 * lower );\n\n\n\t\t// check if the middle array value is above or below the target and shift\n\t\t// which half of the array we're looking at\n\t\tif ( array[ offset + mid ] < targetValue ) {\n\n\t\t\tlower = mid + 1;\n\n\t\t} else {\n\n\t\t\tupper = mid;\n\n\t\t}\n\n\t}\n\n\treturn lower;\n\n}\n\nfunction colorToLuminance( r, g, b ) {\n\n\t// https://en.wikipedia.org/wiki/Relative_luminance\n\treturn 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n}\n\n// ensures the data is all floating point values and flipY is false\nfunction preprocessEnvMap( envMap ) {\n\n\tconst map = envMap.clone();\n\tmap.source = new Source( { ...map.image } );\n\tconst { width, height, data } = map.image;\n\n\t// TODO: is there a simple way to avoid cloning and adjusting the env map data here?\n\t// convert the data from half float uint 16 arrays to float arrays for cdf computation\n\tlet newData = data;\n\tif ( map.type === HalfFloatType ) {\n\n\t\tnewData = new Float32Array( data.length );\n\t\tfor ( const i in data ) {\n\n\t\t\tnewData[ i ] = DataUtils.fromHalfFloat( data[ i ] );\n\n\t\t}\n\n\t\tmap.image.data = newData;\n\t\tmap.type = FloatType;\n\n\t}\n\n\t// remove any y flipping for cdf computation\n\tif ( map.flipY ) {\n\n\t\tconst ogData = newData;\n\t\tnewData = newData.slice();\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst newY = height - y - 1;\n\t\t\t\tconst ogIndex = 4 * ( y * width + x );\n\t\t\t\tconst newIndex = 4 * ( newY * width + x );\n\n\t\t\t\tnewData[ newIndex + 0 ] = ogData[ ogIndex + 0 ];\n\t\t\t\tnewData[ newIndex + 1 ] = ogData[ ogIndex + 1 ];\n\t\t\t\tnewData[ newIndex + 2 ] = ogData[ ogIndex + 2 ];\n\t\t\t\tnewData[ newIndex + 3 ] = ogData[ ogIndex + 3 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tmap.flipY = false;\n\t\tmap.image.data = newData;\n\n\t}\n\n\treturn map;\n\n}\n\nexport class EquirectHdrInfoUniform {\n\n\tconstructor() {\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance row & pdf\n\t\t// used to sampling a random value to a relevant row to sample from\n\t\tconst marginalWeights = new DataTexture();\n\t\tmarginalWeights.type = FloatType;\n\t\tmarginalWeights.format = RedFormat;\n\t\tmarginalWeights.minFilter = LinearFilter;\n\t\tmarginalWeights.magFilter = LinearFilter;\n\t\tmarginalWeights.generateMipmaps = false;\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance column & pdf\n\t\t// used to sampling a random value to a relevant pixel to sample from\n\t\tconst conditionalWeights = new DataTexture();\n\t\tconditionalWeights.type = FloatType;\n\t\tconditionalWeights.format = RedFormat;\n\t\tconditionalWeights.minFilter = LinearFilter;\n\t\tconditionalWeights.magFilter = LinearFilter;\n\t\tconditionalWeights.generateMipmaps = false;\n\n\t\tthis.marginalWeights = marginalWeights;\n\t\tthis.conditionalWeights = conditionalWeights;\n\t\tthis.map = null;\n\n\t\t// the total sum value is separated into two values to work around low precision\n\t\t// storage of floating values in structs\n\t\tthis.totalSumWhole = 0;\n\t\tthis.totalSumDecimal = 0;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.marginalWeights.dispose();\n\t\tthis.conditionalWeights.dispose();\n\t\tif ( this.map ) this.map.dispose();\n\n\t}\n\n\tupdateFrom( hdr ) {\n\n\t\t// https://github.com/knightcrawler25/GLSL-PathTracer/blob/3c6fd9b6b3da47cd50c527eeb45845eef06c55c3/src/loaders/hdrloader.cpp\n\t\t// https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources#InfiniteAreaLights\n\t\tconst map = preprocessEnvMap( hdr );\n\t\tmap.wrapS = RepeatWrapping;\n\t\tmap.wrapT = RepeatWrapping;\n\n\t\tconst { width, height, data } = map.image;\n\n\t\t// \"conditional\" = \"pixel relative to row pixels sum\"\n\t\t// \"marginal\" = \"row relative to row sum\"\n\n\t\t// track the importance of any given pixel in the image by tracking its weight relative to other pixels in the image\n\t\tconst pdfConditional = new Float32Array( width * height );\n\t\tconst cdfConditional = new Float32Array( width * height );\n\n\t\tconst pdfMarginal = new Float32Array( height );\n\t\tconst cdfMarginal = new Float32Array( height );\n\n\t\tlet totalSumValue = 0.0;\n\t\tlet cumulativeWeightMarginal = 0.0;\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tlet cumulativeRowWeight = 0.0;\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst r = data[ 4 * i + 0 ];\n\t\t\t\tconst g = data[ 4 * i + 1 ];\n\t\t\t\tconst b = data[ 4 * i + 2 ];\n\n\t\t\t\t// the probability of the pixel being selected in this row is the\n\t\t\t\t// scale of the luminance relative to the rest of the pixels.\n\t\t\t\t// TODO: this should also account for the solid angle of the pixel when sampling\n\t\t\t\tconst weight = colorToLuminance( r, g, b );\n\t\t\t\tcumulativeRowWeight += weight;\n\t\t\t\ttotalSumValue += weight;\n\n\t\t\t\tpdfConditional[ i ] = weight;\n\t\t\t\tcdfConditional[ i ] = cumulativeRowWeight;\n\n\t\t\t}\n\n\t\t\t// can happen if the row is all black\n\t\t\tif ( cumulativeRowWeight !== 0 ) {\n\n\t\t\t\t// scale the pdf and cdf to [0.0, 1.0]\n\t\t\t\tfor ( let i = y * width, l = y * width + width; i < l; i ++ ) {\n\n\t\t\t\t\tpdfConditional[ i ] /= cumulativeRowWeight;\n\t\t\t\t\tcdfConditional[ i ] /= cumulativeRowWeight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcumulativeWeightMarginal += cumulativeRowWeight;\n\n\t\t\t// compute the marginal pdf and cdf along the height of the map.\n\t\t\tpdfMarginal[ y ] = cumulativeRowWeight;\n\t\t\tcdfMarginal[ y ] = cumulativeWeightMarginal;\n\n\t\t}\n\n\t\t// can happen if the texture is all black\n\t\tif ( cumulativeWeightMarginal !== 0 ) {\n\n\t\t\t// scale the marginal pdf and cdf to [0.0, 1.0]\n\t\t\tfor ( let i = 0, l = pdfMarginal.length; i < l; i ++ ) {\n\n\t\t\t\tpdfMarginal[ i ] /= cumulativeWeightMarginal;\n\t\t\t\tcdfMarginal[ i ] /= cumulativeWeightMarginal;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute a sorted index of distributions and the probabilities along them for both\n\t\t// the marginal and conditional data. These will be used to sample with a random number\n\t\t// to retrieve a uv value to sample in the environment map.\n\t\t// These values continually increase so it's okay to interpolate between them.\n\t\tconst marginalDataArray = new Float32Array( height );\n\t\tconst conditionalDataArray = new Float32Array( width * height );\n\n\t\tfor ( let i = 0; i < height; i ++ ) {\n\n\t\t\tconst dist = ( i + 1 ) / height;\n\t\t\tconst row = binarySearchFindClosestIndexOf( cdfMarginal, dist );\n\n\t\t\tmarginalDataArray[ i ] = row / height;\n\n\t\t}\n\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst dist = ( x + 1 ) / width;\n\t\t\t\tconst col = binarySearchFindClosestIndexOf( cdfConditional, dist, y * width, width );\n\n\t\t\t\tconditionalDataArray[ i ] = col / width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispose();\n\n\t\tconst { marginalWeights, conditionalWeights } = this;\n\t\tmarginalWeights.image = { width: height, height: 1, data: marginalDataArray };\n\t\tmarginalWeights.needsUpdate = true;\n\n\t\tconditionalWeights.image = { width, height, data: conditionalDataArray };\n\t\tconditionalWeights.needsUpdate = true;\n\n\t\tconst totalSumWhole = ~ ~ totalSumValue;\n\t\tconst totalSumDecimal = ( totalSumValue - totalSumWhole );\n\t\tthis.totalSumWhole = totalSumWhole;\n\t\tthis.totalSumDecimal = totalSumDecimal;\n\n\t\tthis.map = map;\n\n\t}\n\n}\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst LIGHT_PIXELS = 6;\nconst RECT_AREA_LIGHT = 0;\nconst CIRC_AREA_LIGHT = 1;\nconst SPOT_LIGHT = 2;\nexport class LightsInfoUniformStruct {\n\n\tconstructor() {\n\n\t\tconst tex = new DataTexture( new Float32Array( 4 ), 1, 1 );\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = FloatType;\n\t\ttex.wrapS = ClampToEdgeWrapping;\n\t\ttex.wrapT = ClampToEdgeWrapping;\n\t\ttex.generateMipmaps = false;\n\n\t\tthis.tex = tex;\n\t\tthis.count = 0;\n\n\t}\n\n\tupdateFrom( lights, iesTextures = [] ) {\n\n\t\tconst tex = this.tex;\n\t\tconst pixelCount = Math.max( lights.length * LIGHT_PIXELS, 1 );\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\n\n\t\tif ( tex.image.width !== dimension ) {\n\n\t\t\ttex.dispose();\n\n\t\t\ttex.image.data = new Float32Array( dimension * dimension * 4 );\n\t\t\ttex.image.width = dimension;\n\t\t\ttex.image.height = dimension;\n\n\t\t}\n\n\t\tconst floatArray = tex.image.data;\n\n\t\tconst u = new Vector3();\n\t\tconst v = new Vector3();\n\t\tconst m = new Matrix4();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst eye = new Vector3();\n\t\tconst target = new Vector3();\n\t\tconst up = new Vector3();\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst l = lights[ i ];\n\n\t\t\tconst baseIndex = i * LIGHT_PIXELS * 4;\n\t\t\tlet index = 0;\n\n\t\t\t// sample 1\n\t\t    // position\n\t\t\tl.getWorldPosition( v );\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t// type\n\t\t\tlet type = RECT_AREA_LIGHT;\n\t\t\tif ( l.isRectAreaLight && l.isCircular ) type = CIRC_AREA_LIGHT;\n\t\t\telse if ( l.isSpotLight ) type = SPOT_LIGHT;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = type;\n\n\t\t\t// sample 2\n\t\t\t// color\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.r;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.g;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.b;\n\n\t\t\t// intensity\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.intensity;\n\n\t\t\tl.getWorldQuaternion( worldQuaternion );\n\n\t\t\tif ( l.isRectAreaLight ) {\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tu.set( l.width, 0, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\n\t\t\t\tindex ++;\n\n\t\t\t\t// sample 4\n\t\t\t\t// v vector\n\t\t\t\tv.set( 0, l.height, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t\t// area\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.cross( v ).length() * ( l.isCircular ? ( Math.PI / 4.0 ) : 1.0 );\n\n\t\t\t} else if ( l.isSpotLight ) {\n\n\t\t\t\tconst radius = l.radius;\n\t\t\t\teye.setFromMatrixPosition( l.matrixWorld );\n\t\t\t\ttarget.setFromMatrixPosition( l.target.matrixWorld );\n\t\t\t\tm.lookAt( eye, target, up );\n\t\t\t\tworldQuaternion.setFromRotationMatrix( m );\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tu.set( 1, 0, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\n\t\t\t\tindex ++;\n\n\t\t\t\t// sample 4\n\t\t\t\t// v vector\n\t\t\t\tv.set( 0, 1, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t\t// area\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.PI * radius * radius;\n\n\t\t\t\t// sample 5\n\t\t\t\t// radius\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = radius;\n\n\t\t\t\t// near\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.shadow.camera.near;\n\n\t\t\t\t// decay\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.decay;\n\n\t\t\t\t// distance\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.distance;\n\n\t\t\t\t// sample 6\n\t\t\t\t// coneCos\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle );\n\n\t\t\t\t// penumbraCos\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle * ( 1 - l.penumbra ) );\n\n\t\t\t\t// iesProfile\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = iesTextures.indexOf( l.iesTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\ttex.needsUpdate = true;\n\t\tthis.count = lights.length;\n\n\t}\n\n}\n","import {\n\tClampToEdgeWrapping,\n\tColor,\n\tFloatType,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tNoToneMapping,\n\tRGBAFormat,\n\tWebGLArrayRenderTarget,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { IESLoader } from '../utils/IESLoader.js';\n\nconst prevColor = new Color();\nexport class IESProfilesTexture extends WebGLArrayRenderTarget {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconst tex = this.texture;\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = FloatType;\n\t\ttex.minFilter = LinearFilter;\n\t\ttex.magFilter = LinearFilter;\n\t\ttex.wrapS = ClampToEdgeWrapping;\n\t\ttex.wrapT = ClampToEdgeWrapping;\n\t\ttex.generateMipmaps = false;\n\n\t\ttex.updateFrom = ( ...args ) => {\n\n\t\t\tthis.updateFrom( ...args );\n\n\t\t};\n\n\t\tconst fsQuad = new FullScreenQuad( new MeshBasicMaterial() );\n\t\tthis.fsQuad = fsQuad;\n\n\t\tthis.iesLoader = new IESLoader();\n\n\t}\n\n\tasync updateFrom( renderer, textures ) {\n\n\t\t// save previous renderer state\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevToneMapping = renderer.toneMapping;\n\t\tconst prevAlpha = renderer.getClearAlpha();\n\t\trenderer.getClearColor( prevColor );\n\n\t\t// resize the render target and ensure we don't have an empty texture\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\n\t\tconst depth = textures.length || 1;\n\t\tthis.setSize( 360, 180, depth );\n\t\trenderer.setClearColor( 0, 0 );\n\t\trenderer.toneMapping = NoToneMapping;\n\n\t\t// render each texture into each layer of the target\n\t\tconst fsQuad = this.fsQuad;\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\t\t\tif ( texture ) {\n\n\t\t\t\t// revert to default texture transform before rendering\n\t\t\t\ttexture.matrixAutoUpdate = false;\n\t\t\t\ttexture.matrix.identity();\n\n\t\t\t\tfsQuad.material.map = texture;\n\t\t\t\tfsQuad.material.transparent = true;\n\n\t\t\t\trenderer.setRenderTarget( this, i );\n\t\t\t\tfsQuad.render( renderer );\n\n\t\t\t\t// restore custom texture transform\n\t\t\t\ttexture.updateMatrix();\n\t\t\t\ttexture.matrixAutoUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset the renderer\n\t\tfsQuad.material.map = null;\n\t\trenderer.setClearColor( prevColor, prevAlpha );\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.toneMapping = prevToneMapping;\n\n\t\tfsQuad.dispose();\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n"],"names":["parcelRequire","$ilwiq","$d0f249dd9f03ac59$var$renderTask","_renderer","_fsQuad","_blendQuad","_primaryTarget","_blendTargets","alpha","camera","material","this","blendMaterial","blendTarget1","blendTarget2","opacity","samples","blending","NoBlending","NormalBlending","w","width","h","height","resolution","set","seed","tilesX","tiles","x","tilesY","y","totalTiles","dprInv","getPixelRatio","cameraWorldMatrix","copy","matrixWorld","invProjectionMatrix","projectionMatrixInverse","cameraType","projectionMatrix","elements","isEquirectCamera","setDefine","ogRenderTarget","getRenderTarget","ogAutoClear","autoClear","tx","ty","stableTiles","tileIndex","_currentTile","setRenderTarget","setScissorTest","setScissor","Math","ceil","render","target1","texture","target2","round","$d0f249dd9f03ac59$var$ogClearColor","Color","$d0f249dd9f03ac59$export$196da6cc71a4331","v","target","_alpha","dispose","reset","constructor","renderer","Vector2","stableNoise","$RPVlj","FullScreenQuad","$2JSgM","BlendMaterial","_task","WebGLRenderTarget","format","RGBAFormat","type","FloatType","setSize","ogClearAlpha","getClearAlpha","getClearColor","setClearColor","clearColor","update","call","next","$1fe9e194dadaa0ff$export$70ee8b3cbd6f21d8","$9fZ6X","MaterialBase","parameters","super","uniforms","value","vertexShader","fragmentShader","setValues","$fc1143d2ee906d9d$export$b42762e2bf679e84","initialized","Boolean","bvh","scene","objects","Array","isArray","geometry","BufferGeometry","materials","textures","lights","staticGeometryGenerator","$8Zfx2","StaticGeometryGenerator","generate","attributes","i","l","length","traverse","c","isMesh","normalMapRequired","normalMap","$jM3IF","setCommonAttributes","isRectAreaLight","isSpotLight","push","textureSet","Set","getMaterials","forEach","key","isTexture","add","materialIndexAttribute","getGroupMaterialIndicesAttribute","setAttribute","clearGroups","MeshBVH","from","refit","$465cbee6efe1dae1$var$isTypedArray","arr","buffer","ArrayBuffer","$465cbee6efe1dae1$export$c80603c061964928","ignoreKeys","shareTextures","areEqual","objectA","objectB","keySet","traverseSet","a","b","Object","has","Error","aIsElement","Element","bIsElement","Image","src","aIsImageBitmap","ImageBitmap","bIsImageBitmap","equals","aIsTypedArray","bIsTypedArray","clear","hasOwnProperty","Function","key1","keys","values","result","delete","process","object","replaced","processMaterial","foundMaterial","otherMaterial","image","foundTexture","retained","$f1d46319b05d893e$export$baf85f88dacad6d5","PerspectiveCamera","bokehSize","size","fStop","getFocalLength","args","apertureBlades","apertureRotation","focusDistance","anamorphicRatio","$2c39bed40281e07d$export$6503f7c8e24ae98b","Camera","$983bac6297e5cd71$export$920191b129a29c0","SpotLight","iesTexture","radius","$da3d2bb2945c982a$export$9641f8e91392f35d","RectAreaLight","isCircular","$ac13547279de9cd0$var$PMREMCopyMaterial","envMap","blur","$jNhCl","shaderUtils","$ac13547279de9cd0$export$13ef63fd7e562136","pmremGenerator","PMREMGenerator","copyQuad","renderTarget","pmremTarget","fromEquirectangular","prevRenderTarget","prevClear","Float32Array","readRenderTargetPixels","DataTexture","minFilter","magFilter","wrapS","wrapT","mapping","EquirectangularReflectionMapping","needsUpdate","$52f95bc4e24e9612$var$IESLamp","text1","_self","textArray","split","line1","lineNumber","textToArray","text","replace","readArray","count","array","lineData","Number","verAngles","horAngles","candelaValues","tiltData","angles","mulFactors","includes","line","lampToLumGeometry","numAngles","readTilt","lumens","multiplier","numVerAngles","numHorAngles","gonioType","units","readLampValues","ballFactor","blpFactor","inputWatts","readLampFactors","i4","i1","i2","j","maxVal","i3","j1","$52f95bc4e24e9612$export$f1ffec369846389b","Loader","_getIESValues","iesLamp","data","interpolateCandelaValues","phi","theta","phiIndex","thetaIndex","startTheta","endTheta","startPhi","endPhi","i5","deltaTheta","deltaPhi","t1","t2","nextThetaIndex","v1","MathUtils","lerp","v2","startTheta1","endTheta1","i6","floor","load","url","onLoad","onProgress","onError","loader","FileLoader","manager","setResponseType","setCrossOrigin","crossOrigin","setWithCredentials","withCredentials","setPath","path","setRequestHeader","requestHeader","RedFormat","LinearFilter","undefined","parse","$63d273140796a952$export$e6c92f54dc85f279","transparent","depthWrite","depthTest","defines","USE_SLIDER","sigma","threshold","kSigma","map","$60ded07f88e52847$export$8af0c82d10044f6a","graphFunctionSnippet","_graphFunctionSnippet","dim","thickness","graphCount","graphDisplay","Vector4","overlay","xRange","yRange","colors","convertSRGBToLinear","onBeforeCompile","shader","customProgramCacheKey","$6b5ea45f30e12757$export$746cbc9e65f5bcb8","onBeforeRender","physicalCamera","FEATURE_MIS","FEATURE_DOF","FEATURE_GRADIENT_BG","TRANSPARENT_TRAVERSALS","CAMERA_TYPE","bounces","$iyhQ7","PhysicalCameraUniform","MeshBVHUniformStruct","normalAttribute","FloatVertexAttributeTexture","tangentAttribute","uvAttribute","colorAttribute","UIntVertexAttributeTexture","$laA5G","MaterialsTexture","$12pjC","RenderTarget2DArray","$TWVPU","LightsInfoUniformStruct","iesProfiles","$8nCwU","IESProfilesTexture","Matrix4","backgroundBlur","environmentIntensity","environmentRotation","Matrix3","envMapInfo","$kAJM1","EquirectHdrInfoUniform","filterGlossyFactor","bgGradientTop","bgGradientBottom","backgroundAlpha","shaderStructs","shaderIntersectFunction","$5Wq6T","shaderMaterialStructs","shaderLightStruct","$fcAdp","shaderMaterialSampling","$1RTaa","shaderEnvMapSampling","$22srR","shaderLightSampling","$f69686fae5159582$var$MATERIAL_STRIDE","$f69686fae5159582$var$MATERIAL_PIXELS","$f69686fae5159582$export$ae96f3619813ce17","ClampToEdgeWrapping","generateMipmaps","threeCompatibilityTransforms","setCastShadow","materialIndex","cast","getCastShadow","setSide","side","index","FrontSide","BackSide","DoubleSide","getSide","setMatte","matte","getMatte","updateFrom","getTexture","def","indexOf","getField","writeTextureMatrixToArray","textureKey","offset","specularMap","displacementMap","bumpMap","roughnessMap","metalnessMap","alphaMap","emissiveMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","iridescenceMap","iridescenceThicknessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","getUVTransformTexture","matrix","pixelCount","dimension","sqrt","floatArray","m","color","r","g","emissive","normalScale","clearcoatNormalScale","sheenColor","iridescenceThicknessRange","specularColor","Infinity","attenuationColor","alphaTest","vertexColors","$0c199d70d276a61d$var$prevColor","$0c199d70d276a61d$export$dbbaa51cb2d0b2f7","WebGLArrayRenderTarget","args1","tex","UnsignedByteType","RepeatWrapping","setTextures","fsQuad","MeshBasicMaterial","prevToneMapping","toneMapping","prevAlpha","depth","NoToneMapping","matrixAutoUpdate","identity","updateMatrix","$bmrjs","$b114119888481524$export$aba3482f45fc2e55","shaderGGXFunctions","$bQHTv","shaderSheenFunctions","$6wwLz","shaderIridescenceFunctions","$8456ef8cb9b1d3a5$export$75d2a701aae03ef9","$8a06998b2d01b1dc$export$300995c3bffdc4dd","$4bff25ed6e99776b$export$edc525d01b11600f","$15c587eb667da097$export$c4e96847515c3dca","$17c1d5e781a3625a$export$72ea2c7ee2a3cb14","$kLfIo","$d8193d8a8d6141d1$export$2e27c77dea3c9d73","PhysicalCamera","$efdaad16b8cd905b$var$binarySearchFindClosestIndexOf","targetValue","lower","upper","mid","$efdaad16b8cd905b$var$colorToLuminance","$efdaad16b8cd905b$export$e5a77e5d6a85a862","marginalWeights","conditionalWeights","totalSumWhole","totalSumDecimal","hdr","clone","source","Source","newData","HalfFloatType","DataUtils","fromHalfFloat","flipY","ogData","slice","ogIndex","newIndex","$efdaad16b8cd905b$var$preprocessEnvMap","pdfConditional","cdfConditional","pdfMarginal","cdfMarginal","totalSumValue","cumulativeWeightMarginal","cumulativeRowWeight","weight","marginalDataArray","conditionalDataArray","row","y1","col","$0a82d9ce12cf98b8$export$bb02c0eb15767758","iesTextures","max","u","Vector3","worldQuaternion","Quaternion","eye","up","baseIndex","getWorldPosition","z","intensity","getWorldQuaternion","applyQuaternion","cross","PI","setFromMatrixPosition","lookAt","setFromRotationMatrix","shadow","near","decay","distance","cos","angle","penumbra","$619e5bed458602b0$var$prevColor","$619e5bed458602b0$export$cc46c2e928f0cae0","iesLoader","$77Fts","IESLoader","async"],"version":3,"file":"areaLight.bc8078b3.js.map"}